package com.ceos.s7.sapi;

import com.sun.jna.NativeLong;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : line 564</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class S7_SCAN_OBJECT extends Structure {
	/// C type : ord16
	public short state;
	/// C type : ord16
	public short ack_state;
	/// C type : ord16
	public short event_state;
	/// C type : ord32
	public NativeLong event_id;
	/// C type : ord16
	public short no_add_value;
	/// C type : add_value_struct[10]
	public S7_SCAN_OBJECT.add_value_struct[] add_value = new S7_SCAN_OBJECT.add_value_struct[10];
	/// <i>native declaration : line 571</i>
	/// <i>native declaration : line 571</i>
	public static class add_value_struct extends Structure {
		/// C type : ord16
		public short data_type;
		/// C type : ord16
		public short add_value_len;
		/// C type : ord8[4 + 2]
		public byte[] value = new byte[4 + 2];
		public add_value_struct() {
			super();
			initFieldOrder();
		}
		protected void initFieldOrder() {
			setFieldOrder(new String[]{"data_type", "add_value_len", "value"});
		}
		/**
		 * @param data_type C type : ord16<br>
		 * @param add_value_len C type : ord16<br>
		 * @param value C type : ord8[4 + 2]
		 */
		public add_value_struct(short data_type, short add_value_len, byte value[]) {
			super();
			this.data_type = data_type;
			this.add_value_len = add_value_len;
			if (value.length != this.value.length) 
				throw new IllegalArgumentException("Wrong array size !");
			this.value = value;
			initFieldOrder();
		}
		public static class ByReference extends add_value_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends add_value_struct implements Structure.ByValue {
			
		};
                
                @Override
                protected List getFieldOrder() {
                    return Arrays.asList(new String[]{"data_type", "add_value_len", "value"});
                }                                   
                
	};
        
        
	public S7_SCAN_OBJECT() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"state", "ack_state", "event_state", "event_id", "no_add_value", "add_value"});
	}
	/**
	 * @param state C type : ord16<br>
	 * @param ack_state C type : ord16<br>
	 * @param event_state C type : ord16<br>
	 * @param event_id C type : ord32<br>
	 * @param no_add_value C type : ord16<br>
	 * @param add_value C type : add_value_struct[10]
	 */
	public S7_SCAN_OBJECT(short state, short ack_state, short event_state, NativeLong event_id, short no_add_value, S7_SCAN_OBJECT.add_value_struct add_value[]) {
		super();
		this.state = state;
		this.ack_state = ack_state;
		this.event_state = event_state;
		this.event_id = event_id;
		this.no_add_value = no_add_value;
		if (add_value.length != this.add_value.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.add_value = add_value;
		initFieldOrder();
	}
	public static class ByReference extends S7_SCAN_OBJECT implements Structure.ByReference {
		
	};
	public static class ByValue extends S7_SCAN_OBJECT implements Structure.ByValue {
		
	};
        
        @Override
        protected List getFieldOrder() {
            return Arrays.asList(new String[]{"state", "ack_state", "event_state", "event_id", "no_add_value", "add_value"});
        }           
}
