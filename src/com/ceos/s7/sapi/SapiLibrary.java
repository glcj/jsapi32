package com.ceos.s7.sapi;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.ShortBuffer;
/** 
 * JNA Wrapper for library <b>sapi</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SapiLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "s732.dll";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(SapiLibrary.JNA_LIBRARY_NAME);
	public static final SapiLibrary INSTANCE = (SapiLibrary)Native.loadLibrary(SapiLibrary.JNA_LIBRARY_NAME, SapiLibrary.class);
	public static final int S7_RESULT_OBJ_NOT_EXISTS = (int)10;
	public static final int S7_ERR_UNKNOWN_ERROR = (int)1;
	public static final int S7_ERR_ADD_VALUE_PDU = (int)171;
	public static final int S7_ERR_R_ID_USED = (int)41;
	public static final int S7_MAX_BUFLEN = (int)256;
	public static final int S7_MAX_SCAN_ADD_VALUE_LEN = (int)4;
	public static final int S7_ERR_OBJ_ACCESS_DENIED = (int)53;
	public static final int S7_BLOCK_READ_CNF = (int)2049;
	public static final int S7_DIAG_HW_STBY = (int)49;
	public static final int S7_BLOCK_WRITE_UNCONDITIONAL = (int)4096;
	public static final int S7_DIAG_H_OK_RED_PATH_CHG = (int)33;
	public static final int S7_ERR_IEC_RECEIVER_DISABLED = (int)6;
	public static final int S7_MAX_WAYS = (int)4;
	public static final int S7_ERR_BLOCK_ALREADY_EXISTS = (int)277;
	public static final int S7_ERR_IEC_PARTNER_IN_WRONG_STATE = (int)7;
	public static final int S7_ERR_INSTALL = (int)140;
	public static final int S7_CYCL_READ_ABORT_IND = (int)1025;
	public static final int S7_MINI_DB_INIT_CNF_PDU_SIZE = (int)32;
	public static final int S7_MINI_DB_VERSION = (int)70;
	public static final int S7_OPERATIONAL = (int)16;
	public static final int S7_ERR_NO_SIN_SERV = (int)142;
	public static final int S7_ACCESS_NAME = (int)1;
	public static final int S7D_STD_TYPE = (int)2;
	public static final int S7_MAX_ADD_VALUES = (int)10;
	public static final int S7_MINI_DB_INIT_IND_AMQ_CALLED = (int)51;
	public static final int S7_ALARM_ALL_INITIATE = (int)5;
	public static final String S7_TRACE_DEPTH_LIB0 = (String)"103";
	public static final int S7_DIAG_HW_PROD = (int)48;
	public static final int S7_ERR_REM_BSEND_CANCEL = (int)162;
	public static final int S7_DATATYPE_UNSIGNED = (int)6;
	public static final int S7_ERR_NO_RCV_BLOCK = (int)170;
	public static final int S7_RESULT_OBJ_ADDRESS_INVALID = (int)5;
	public static final int S7_ERR_NO_PASSWORD = (int)293;
	public static final int S7_ERR_INVALID_FILENAME = (int)85;
	public static final int S7_ERR_INVALID_R_ID = (int)40;
	public static final int S7_CYCL_READ_START_CNF = (int)1029;
	public static final int S7_ERR_OBJ_UNDEFINED = (int)50;
	public static final int S7_ERR_WRONG_CP_DESCR = (int)2;
	public static final int S7_DIAG_STD_NOT_USED = (int)19;
	public static final int S7_ACCEPT = (int)1;
	public static final int S7_ERR_TOO_LONG_DATA = (int)8;
	public static final String S7_TRACE_SELECT_OTHER_SERVICES = (String)"512";
	public static final int S7_MINI_DB_TRACE_MAXLINES = (int)32768;
	public static final int S7_BRCV_CANCEL_IND = (int)1539;
	public static final int S7_ERR_INVALID_WRITE_BUFFER = (int)84;
	public static final int S7_ERR_DGN_INFO_NOT_AVAIL = (int)177;
	public static final int S7_ERR_REM_BSEND = (int)161;
	public static final int S7_ERR_MAX_REQ = (int)122;
	public static final int S7_ERR_SYMB_ADDRESS_INCONSISTENT = (int)151;
	public static final int S7_DIAG_HW_NOT_USED = (int)51;
	public static final int S7_SCAN_NO_MSG = (int)129;
	public static final String S7_TRACE_DEPTH_S7_BUF = (String)"103";
	public static final int S7_PASSWORD_LEN = (int)8;
	public static final int S7_CYCL_READ_STOP_CNF = (int)1030;
	public static final int S7_ERR_OBJ_ATTR_INCONSISTENT = (int)51;
	public static final String S7_TRACE_DEPTH_LIB0_PDU = (String)"104";
	public static final int S7_BLOCK_OB = (int)8;
	public static final int S7_MINI_DB_TRACE_MAXFILES = (int)99;
	public static final int S7D_H_TYPE = (int)3;
	public static final int S7_MINI_DB_INIT_CNF_AMQ_CALLING = (int)30;
	public static final int S7_ERR_NO_LICENCE = (int)143;
	public static final int S7_ERR_INVALID_CYCL_READ_STATE = (int)130;
	public static final int S7_MAX_BUFLEN_LONG = (int)932;
	public static final int S7_ALARM_IND = (int)17412;
	public static final int S7_ERR_CONN_NAME_NOT_FOUND = (int)23;
	public static final int S7_DATATYPE_OCTET_STRING = (int)9;
	public static final int S7_MULTIPLE_READ_CNF = (int)771;
	public static final int S7_MINI_DB_INIT_IND_AMQ_CALLING = (int)50;
	public static final String S7_TRACE_SELECT_DOM_SERVICES = (String)"8192";
	public static final int S7_DATATYPE_TIME = (int)50;
	public static final int S7_BLOCK_COMPRESS_CNF = (int)2053;
	public static final int S7_MINI_DB_ABORT_TIMEOUT = (int)62;
	public static final int S7_VFD_USTATE_IND = (int)514;
	public static final int S7_ERR_FEW_PROT_LEVEL = (int)180;
	public static final int S7_RESULT_OBJ_TYPE_NOT_SUPPORTED = (int)6;
	public static final int S7_MINI_DB_INIT_IND_PDU_SIZE = (int)52;
	public static final int S7_DIAG_STD_OK = (int)20;
	public static final int S7_BLOCK_DELETE_CNF = (int)2051;
	public static final int S7_ERR_IEC_RESET_RECEIVED = (int)5;
	public static final int S7_ERR_INVALID_PARAMETER = (int)7;
	public static final int S7_SET_PASSWORD = (int)1;
	public static final int S7_MAX_BSEND_BRCV_DATA = (int)65534;
	public static final String S7_TRACE_SELECT_DIAG_SERVICES = (String)"4096";
	public static final int S7_DIAG_STD_DOWN = (int)17;
	public static final int S7_RESULT_HW_ERROR = (int)1;
	public static final String S7_TRACE_SELECT_OD_SERVICES = (String)"8";
	public static final int S7_ABORT_IND = (int)259;
	public static final String S7_TRACE_SELECT_CYCL_VAR_SERVICES = (String)"128";
	public static final int S7_READ_CNF = (int)769;
	public static final int S7_STATE_CHANGES_ALLOWED = (int)0;
	public static final int S7_MINI_DB_INIT_CNF_AMQ_CALLED = (int)31;
	public static final int S7_DATATYPE_FLOAT = (int)7;
	public static final int S7_ERR_INVALID_READ_BUFFER = (int)88;
	public static final int S7_DIAG_IND = (int)1793;
	public static final int S7_ERR_REM_DATABASE_TOO_SMALL = (int)163;
	public static final String S7_TRACE_SELECT_DE2_SERVICES = (String)"64";
	public static final int S7_ERR_CONN_CNF = (int)123;
	public static final int S7_ERR_IEC_NEG_RESPONSE = (int)2;
	public static final int S7_ERR_NO_RESOURCE = (int)3;
	public static final int S7_DATATYPE_INTEGER = (int)5;
	public static final int S7_MINI_DB_TRACE_DEPTH = (int)2;
	public static final String S7_TRACE_SELECT_CONN_SERVICES = (String)"2";
	public static final int S7_ERR_INVALID_ORDERID = (int)30;
	public static final int S7_ERR_INVALID_DATARANGE_OR_TYPE = (int)82;
	public static final String S7_TRACE_DEPTH_OFF = (String)"0";
	public static final int S7_DIAG_HW_ABORT = (int)50;
	public static final int S7_ERR_FILE_NOT_FOUND = (int)86;
	public static final int S7_BLOCK_LINK_IN_CNF = (int)2052;
	public static final String S7_TRACE_TARGET_BUFFER = (String)"0";
	public static final int S7_BLOCK_WRITE_CNF = (int)2050;
	public static final int S7_MINI_DB_TRACE_FILENAME = (int)3;
	public static final int S7_MINI_DB_ERROR_CODE = (int)42;
	public static final int S7_DATATYPE_DATE_AND_TIME = (int)52;
	public static final int S7_DIAG_H_DOWN = (int)37;
	public static final int S7_MINI_DB_TRACE_TARGET = (int)0;
	public static final int S7_ERR_DGN_CONN_NOT_ANNOUNCED = (int)175;
	public static final int S7_MINI_DB_ERROR_CLASS = (int)41;
	public static final int S7_MINI_DB_INIT_RSP_AMQ_CALLED = (int)21;
	public static final int S7_MSG_ABORT_CNF = (int)17410;
	public static final String S7_TRACE_SELECT_ALL = (String)"65535";
	public static final int S7_NO_MSG = (int)0;
	public static final int S7_MINI_DB_PERSISTANCE_COUNT = (int)61;
	public static final int S7_ERR_RETRY = (int)(-1);
	public static final int S7_BLOCK_WRITE_CONDITIONAL = (int)0;
	public static final int S7_ERR_IEC_NO = (int)0;
	public static final int S7_MINI_DB_TRACE_NO_LINES = (int)4;
	public static final String S7_TRACE_DEPTH_SCP_BUF = (String)"104";
	public static final int S7_ERR_DGN_CONN_TOO_MUCH = (int)176;
	public static final int S7_ERR_FW_ERROR = (int)90;
	public static final int S7_MINI_DB_INIT_RSP_AMQ_CALLING = (int)20;
	public static final int S7_MINI_DB_INIT_REQ_AMQ_CALLED = (int)11;
	public static final int S7_ERR_RECEIVE_BUFFER_FULL = (int)81;
	public static final int S7_VFD_STATE_CNF = (int)513;
	public static final int S7_ERR_INVALID_CREF = (int)20;
	public static final int S7_ERR_COORD_RULE = (int)282;
	public static final int S7_INITIATE_IND = (int)258;
	public static final int S7_MAX_DEVICELEN = (int)128;
	public static final int S7_MAX_ALARM_ADD_VALUE_LEN = (int)432;
	public static final String S7_TRACE_SELECT_PMC_SERVICES = (String)"2048";
	public static final int S7_SCAN_ALL_ABORT = (int)0;
	public static final int S7_ERR_SERVICE_NOT_SUPPORTED = (int)11;
	public static final int S7_ACCESS_ADDRESS = (int)3;
	public static final int S7_DIAG_H_OK_RED = (int)32;
	public static final int S7_MINI_DB_TRACE_SELECT = (int)1;
	public static final int S7_RESULT_OBJ_ACCESS_DENIED = (int)3;
	public static final int S7_ERR_INVALID_BLOCK_TYPE = (int)275;
	public static final int S7_BLOCK_DB = (int)10;
	public static final int S7_ERR_INVALID_SEGMENT = (int)83;
	public static final int S7_ERR_INVALID_BLOCK = (int)272;
	public static final int S7_DIAG_STD_ABORT = (int)18;
	public static final int S7_CYCL_READ_DELETE_CNF = (int)1026;
	public static final int S7_MINI_DB_RESPONSE_CODE = (int)40;
	public static final int S7_MAX_ADDRESSLEN = (int)32;
	public static final int S7_ERR_NO_ERROR = (int)0;
	public static final int S7_MSG_INITIATE_CNF = (int)17409;
	public static final int S7_ERR_IEC_DATA_TYPE_MISMATCH = (int)4;
	public static final int S7_CYCL_READ_INIT_CNF = (int)1028;
	public static final int S7_ERR_MINI_DB_VALUE = (int)101;
	public static final int S7_ACCESS_SYMB_ADDRESS = (int)2;
	public static final String S7_TRACE_SELECT_PBK_SERVICES = (String)"1024";
	public static final int S7D_PC_HEADER_CON = (int)1;
	public static final int S7_SCAN_ALL_INITIATE = (int)1;
	public static final int S7_ERR_REM_BRCV = (int)160;
	public static final int S7_DIAG_H_NOT_USED = (int)36;
	public static final int S7_DATATYPE_ERROR = (int)0;
	public static final int S7_ERR_IEC_NO_ACCESS_TO_REM_OBJECT = (int)8;
	public static final int S7_ERR_CONN_ALREADY_PASSED = (int)291;
	public static final int S7_ERR_BLOCK_TOO_LARGE = (int)279;
	public static final int S7_ERR_INVALID_FILETYPE = (int)87;
	public static final int S7_ENTER_PASSWORD = (int)1;
	public static final int S7_NON_ACCEPT = (int)0;
	public static final int S7_ERR_NO_R_ID = (int)42;
	public static final int S7_DATATYPE_BITSTRING = (int)4;
	public static final String S7_TRACE_TARGET_CONSOLE = (String)"3";
	public static final int S7_ERR_TOO_MANY_DLL_USERS = (int)9;
	public static final int S7_ERR_ORDERID_USED = (int)31;
	public static final String S7_TRACE_SELECT_ADMIN_SERVICES = (String)"1";
	public static final int S7_BLOCK_PASSIV = (int)1;
	public static final int S7_BLOCK_FC = (int)12;
	public static final int S7_BLOCK_FB = (int)14;
	public static final int S7_MINI_DB_INIT_REQ_PDU_SIZE = (int)12;
	public static final int S7_SCAN_IND = (int)17411;
	public static final int S7_FILE = (int)1;
	public static final int S7_SCAN_MSG_EXIST = (int)0;
	public static final String S7_TRACE_SELECT_PROFILER = (String)"16384";
	public static final int S7_MAX_BUFLEN_MULTIPLE = (int)256;
	public static final int S7_BLOCK_LINKED_IN = (int)64;
	public static final int S7_MULTIPLE_WRITE_CNF = (int)772;
	public static final String S7_TRACE_DEPTH_OTHER = (String)"102";
	public static final String S7_TRACE_DEPTH_EXCEPT = (String)"100";
	public static final String S7_TRACE_SELECT_VAR_SERVICES = (String)"16";
	public static final String S7_TRACE_DEPTH_INTERFACE = (String)"101";
	public static final int S7_ERR_INVALID_PASSWORD = (int)290;
	public static final int S7_ERR_WRONG_IND_CNF = (int)10;
	public static final int S7_MINI_DB_INIT_RSP_PDU_SIZE = (int)22;
	public static final int S7_ERR_SERVICE_CONN_ALREADY_USED = (int)113;
	public static final int S7_DATATYPE_STRUCTURE = (int)2;
	public static final int S7_RESULT_OK = (int)255;
	public static final int S7_ERR_INTERNAL_ERROR = (int)141;
	public static final int S7_ERR_INVALID_BLOCK_NR = (int)280;
	public static final String S7_TRACE_SELECT_VFD_SERVICES = (String)"32";
	public static final int S7_BRCV_IND = (int)1538;
	public static final int S7_DIAG_H_OK_NOT_RED = (int)34;
	public static final int S7_BLOCK_SDB = (int)11;
	public static final int S7_MAX_BLOCKS = (int)1;
	public static final int S7_ERR_BLOCK_NOT_FOUND = (int)276;
	public static final int S7_ERR_CONN_ALREADY_FREE = (int)292;
	public static final int S7_CYCL_READ_IND = (int)1027;
	public static final int S7_DATATYPE_TIME_OF_DAY = (int)49;
	public static final int S7_ERR = (int)(-2);
	public static final int S7D_WAY_INFO_INDEX = (int)4;
	public static final int S7_BSEND_CNF = (int)1537;
	public static final int S7_DATATYPE_S5TIME = (int)51;
	public static final String S7_TRACE_SELECT_CRL_SERVICES = (String)"4";
	public static final int S7_ERR_IEC_INVALID_REF = (int)3;
	public static final int S7_MAX_SCAN_OBJECT = (int)80;
	public static final int S7_ERR_INVALID_DATA_SIZE = (int)80;
	public static final int S7_DIAG_H_ABORT = (int)35;
	public static final int S7_MINI_DB_NEGOTIATION_OPTIONS = (int)60;
	public static final int S7_ERR_IEC_RECEIVER_OVERRUN = (int)9;
	public static final int S7_AWAIT_INITIATE_CNF = (int)260;
	public static final String S7_TRACE_TARGET_NEW_FILE = (String)"1";
	public static final int S7_DIAG_HW_CN_BREAK = (int)53;
	public static final int S7_UNKNOWN_MSG = (int)1;
	public static final int S7_MINI_DB_INIT_REQ_AMQ_CALLING = (int)10;
	public static final int S7D_DIAG_CONN_INFO = (int)5;
	public static final int S7_ERR_SYMB_ADDRESS = (int)150;
	public static final int S7_NEEDS_COMMISSIONING = (int)19;
	public static final int S7_OK = (int)0;
	public static final int S7_RESET_PASSWORD = (int)0;
	public static final int S7_DIAG_HW_DOWN = (int)52;
	public static final int S7_ERR_IEC_LOWER_LAYER = (int)1;
	public static final int S7_ALARM_ALL_ABORT = (int)4;
	public static final int S7_BRCV_STOP = (int)1540;
	public static final int S7_ERR_MINI_DB_TYPE = (int)100;
	public static final int S7_DATATYPE_DATE = (int)48;
	public static final int S7_DATATYPE_BOOLEAN = (int)3;
	public static final int S7_BLOCK_SFB = (int)15;
	public static final int S7_BLOCK_SFC = (int)13;
	public static final int S7_INITIATE_CNF = (int)257;
	public static final int S7_MEMORY = (int)0;
	public static final int S7_ERR_NOT_ENOUGH_AS_RAM = (int)281;
	public static final int S7_ERR_NO_LDB_XDB_FILE = (int)25;
	public static final String S7_TRACE_TARGET_OLD_FILE = (String)"2";
	public static final int S7_ERR_CONN_ABORTED = (int)120;
	public static final int S7_WRITE_CNF = (int)770;
	public static final int S7_MAX_NAMLEN = (int)32;
	public static final String S7_TRACE_SELECT_RECEIVE_SERVICES = (String)"256";
	public static final int S7_ERR_INVALID_CONN_STATE = (int)121;
	public static final int S7_RESULT_OBJ_TYPE_INCONSISTENT = (int)7;
	public static final int S7_ERR_BLOCK_PROTECTED = (int)278;
	public static final String S7_TRACE_DEPTH_USER = (String)"1";
	public static final int S7_PASSWORD_CNF = (int)2054;
	public static final int S7_ERR_SERVICE_VFD_ALREADY_USED = (int)112;
               
/**
 * With the 's7_abort()' call, an existing S7 connection is aborted without 
 * confirmation and without any negotiation.
 * Fetching a response with 's7_receive()' is unnecessary since this is an
 * unacknowledged service. You should also bear in mind that
 * acknowledgments may still arrive later or may not be received at all.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference to the S7 connection that will be established.
 * 
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred 
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_abort(NativeLong cp_descr, short cref);
        
/**
 * The 's7_await_initiate_req()' call prepares the communications system for
 * connection requests from the remote partner. The initiative for establishing
 * the connection comes from the partner station and the required parameters
 * are read from the mini-DB. They can be read,modified and adapted to the
 * current requirements by the user program.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference to the S7 connection that will be established.
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
 *
 */
	int s7_await_initiate_req(NativeLong cp_descr, short cref);
        
/**
 * With this request, an S7 application instructs the server to prepare for
 * cyclic reading of variables. The request contains the cycle time, the
 * number of variables and the variables to be read.<br>
 * 
 * @param cp_descr Handle as return value of the 's7_init()' call
 * @param cref Reference of the S7 connection via which the job will be sent.
 * The variable values are transferred on this connection.
 * @param orderid Job identifier to identify the job to be sent and the 
 * corresponding confirmation. This job identifier must be used for further
 * jobs such as start ('s7_cycl_read_start_req()'), stop 
 * ('s7_cycl_read_stop_req()') and delete ('s7_cycl_read_delete_req()') the
 * cyclic reading.
 * @param cycl_time Cycle time as a multiple of 10ths of seconds. SAPIS7
 * rounds down to a permitted value (1, 2 to 9 and 10, 20 to 90 and 100, 200
 * to 900.
 * @param number Number of variables whose values will be read cyclically.
 * @read_para_array Pointer to an array provided by the user program with 
 * a total of 'number' elements of the following structure, where the nth
 * element describes the nth variable:<br>
 * struct S7_READ_PARA<br>
 * {    ord16 access;<br>
 *      char var_name[S7_MAX_NAMLEN+2];<br>
 *      ord16 index;<br>
 *      ord16 subindex;<br>
 *      ord16 address_len;<br>
 *      ord8 address[S7_MAX_ADDRESSLEN];<br>
 * }<br>
 * The 'access' parameter indicates the type of access. With
 * 'S7_ACCESS_SYMB_ADDRESS', the symbolic address in the 'var_name' field
 * is expected.<br>
 * The 'var_name' parameter specifies the symbolic address of the variable to
 * be read and is evaluated if the variable is to be accessed by its symbolic
 * address ('access=S7_ACCESS_SYMB_ADDRESS'). (Please refer to the general
 * information about variable addressing at the start of this section.)<br>
 * The 'index' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'subindex' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'address_len' parameter is irrelevant and only implemented for reasons
 * of compatibility with other SAPI interfaces.<br>
 * The 'address' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 * <b>Amounts of Data</b> The maximum length of the variable addresses and
 * result data depends on the negotiated PDU size. For details of the PDU size,
 * refer to Section 3.4.2, 's7_get_initiate_cnf', page 64 (formulas for 
 * calculating intermediate values in Section 7.3, page 208). The following
 * table shows examples:<br>
 * PDU
 * Size
 * (bytes)
 * Maximum Number
 * of Variable
 * Addresses
 * Maximum Length of the Result
 * Data with the Maximum Number
 * of Variable Addresses
 * 240 17 144
 * 256 19 152
 * 480 37 304
 * 960 77 624
 * <br>
 */
	int s7_cycl_read(NativeLong cp_descr, short cref, short orderid, short cycl_time, short number, S7_READ_PARA read_para_array);
        
/**
 * This function stops cyclic reading and logs off at the server.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call. This 
 * parameter must match the corresponding parameter of the
 * 's7_cycl_read_init_req()'- or 's7_cycl_read()' call .
 * @param cref Reference of the S7 connection via which the job will be sent.
 * This parameter must match the corresponding parameter of the 
 * 's7_cycl_read_init_req()'- or 's7_cycl_read()' call .
 * @param orderid Job identifier to identify the job to be sent and the 
 * corresponding confirmation. This parameter must match the corresponding
 * parameter of the 's7_cycl_read_init_req()'- or 's7_cycl_read()' call .
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_cycl_read_delete_req(NativeLong cp_descr, short cref, short orderid);
        
/**
 * With this request, an S7 application instructs the server to prepare for
 * cyclic reading of variables. The request contains the cycle time, the
 * number of variables and the variables to be read.<br>
 * 
 * @param cp_descr Handle as return value of the 's7_init()' call
 * @param cref Reference of the S7 connection via which the job will be sent.
 * The variable values are transferred on this connection.
 * @param orderid Job identifier to identify the job to be sent and the 
 * corresponding confirmation. This job identifier must be used for further
 * jobs such as start ('s7_cycl_read_start_req()'), stop 
 * ('s7_cycl_read_stop_req()') and delete ('s7_cycl_read_delete_req()') the
 * cyclic reading.
 * @param cycl_time Cycle time as a multiple of 10ths of seconds. SAPIS7
 * rounds down to a permitted value (1, 2 to 9 and 10, 20 to 90 and 100, 200
 * to 900.
 * @param number Number of variables whose values will be read cyclically.
 * @read_para_array Pointer to an array provided by the user program with 
 * a total of 'number' elements of the following structure, where the nth
 * element describes the nth variable:<br>
 * struct S7_READ_PARA<br>
 * {    ord16 access;<br>
 *      char var_name[S7_MAX_NAMLEN+2];<br>
 *      ord16 index;<br>
 *      ord16 subindex;<br>
 *      ord16 address_len;<br>
 *      ord8 address[S7_MAX_ADDRESSLEN];<br>
 * }<br>
 * The 'access' parameter indicates the type of access. With
 * 'S7_ACCESS_SYMB_ADDRESS', the symbolic address in the 'var_name' field
 * is expected.<br>
 * The 'var_name' parameter specifies the symbolic address of the variable to
 * be read and is evaluated if the variable is to be accessed by its symbolic
 * address ('access=S7_ACCESS_SYMB_ADDRESS'). (Please refer to the general
 * information about variable addressing at the start of this section.)<br>
 * The 'index' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'subindex' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'address_len' parameter is irrelevant and only implemented for reasons
 * of compatibility with other SAPI interfaces.<br>
 * The 'address' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 * <b>Amounts of Data</b> The maximum length of the variable addresses and
 * result data depends on the negotiated PDU size. For details of the PDU size,
 * refer to Section 3.4.2, 's7_get_initiate_cnf', page 64 (formulas for 
 * calculating intermediate values in Section 7.3, page 208). The following
 * table shows examples:<br>
 * PDU
 * Size
 * (bytes)
 * Maximum Number
 * of Variable
 * Addresses
 * Maximum Length of the Result
 * Data with the Maximum Number
 * of Variable Addresses
 * 240 17 144
 * 256 19 152
 * 480 37 304
 * 960 77 624
 * <br>
 */
	int s7_cycl_read_init_req(NativeLong cp_descr, short cref, short orderid, short cycl_time, short number, S7_READ_PARA read_para_array);
        
/**
 * With this request, an S7 application instructs the server to start cyclic
 * reading of variables. The server must already have been prepared with
 * the 's7_cycl_read_init_req()' call.
 * @param cp_descr Handle as return value of the 's7_init()' call. This
 * parameter must match the corresponding parameter of the 
 * 's7_cycl_read_init_req()' call.
 * @param cref Reference of the S7 connection via which the job will be sent.
 * This parameter must match the corresponding parameter of the
 * 's7_cycl_read_init_req()' call.
 * @param orderid Job identifier to identify the job to be sent and the
 * corresponding confirmation. This parameter must match the corresponding
 * parameter of the 's7_cycl_read_init_req()' call.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error such
 * as assigning new parameters for the call.<br>
 */
	int s7_cycl_read_start_req(NativeLong cp_descr, short cref, short orderid);
        
/**
 * With this request, an S7 application instructs the server to stop cyclic
 * reading of variables. The server must already have been requested to read
 * variables cyclically.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call. This
 * parameter must match the corresponding parameter of the 
 * 's7_cycl_read_init_req()'- or 's7_cycl_read()' call .
 * @param cref Reference of the S7 connection via which the job will be sent.
 * This parameter must match the corresponding parameter of the
 * 's7_cycl_read_init_req()'- or 's7_cycl_read()' call .
 * @param orderid Job identifier to identify the job to be sent and the
 * corresponding confirmation. This parameter must match the corresponding
 * parameter of the 's7_cycl_read_init_req()'- or 's7_cycl_read()' call .
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_cycl_read_stop_req(NativeLong cp_descr, short cref, short orderid);
        

/**
 * With this call, the user program can discard a received message without
 * having called the corresponding processing function. Per S7 connection,
 * there is a maximum number of acknowledged jobs that can be processed
 * simultaneously, this maximum number is specified during configuration 
 * and is negotiated when the connection is established. Ignoring (for example
 * unexpected) events and the consequent absence of responses therefore
 * permanently reduces the number of acknowledged jobs that can be used at the
 * same time.
 *
 * @param None
 * @return None
 *
 */
	void s7_discard_msg();
        
/**
 * The 's7_get_abort_ind()' call receives the abort of an S7 connection by a
 * remote station or the CP. 
 * With the 's7_receive()' call , the user program receives the 'S7_ABORT_IND'
 * indication from the remote partner station or from the subordinate
 * communications processor that the S7 connection was aborted. Following this,
 * the corresponding processing function 's7_get_abort_ind()' must be called
 * for internal processing in the library.
 * In S7, aborting an S7 connection is an unacknowledged service. Jobs that
 * have not yet been acknowledged on this S7 connection will no longer be
 * confirmed.
 * 
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error 
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_abort_ind();
        
/**
 * The 's7_get_await_initiate_cnf()' call receives the result of the
 * 's7_await_initiate_req()' job .
 * With the 's7_receive()' call, the user program receives the confirmation
 * 'S7_AWAIT_INITIATE_CNF' if the communications system was prepared for a
 * connection establishment. Following this, the corresponding processing
 * function 's7_get_initiate_cnf()' must be called for internal processing
 * in the library.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred 
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_await_initiate_cnf();
        
/**
 * With this call, the user program can query all the configured S7
 * connections of a VFD and their references on a communications processor.
 * This identifier selects the real connection on the network and is easier to
 * use than the symbolic name.
 * <i>Query all S7 connections</i>To query all S7 connections, it is best to
 * use a program loop. The 'index' parameter is used as the loop variable and
 * runs from 0 to '*number_ptr-1'. The '*number_ptr' has the default 1.
 *
 * @param cp_desc Handle as return value of the 's7_init()' call.
 * @param index The 'index' parameter selects one of the existing S7 connections
 * that are numbered continuously starting at 0.
 * @param number_ptr Address of a variable of the type 'ord16' provided by
 * the user program. The number of configured S7 connections is returned here.
 * @param cref_ptr Address of a variable of the type 'ord16' provided by the
 * user program. The connection reference is returned here.
 * @param conn_name Start address of a memory area provided by the user program
 * in which the configured S7 connection name is entered. The memory area
 * should be at least (S7_MAX_NAMLEN + 1) bytes long for the maximum
 * S7_MAX_NAMLEN byte long connection name including string end identifier.
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
 */
	@Deprecated 
	int s7_get_conn(NativeLong cp_descr, short index, ShortByReference number_ptr, ShortByReference cref_ptr, Pointer conn_name);
	/**
	 * Original signature : <code>int32 s7_get_conn(ord32, ord16, ord16*, ord16*, char*)</code><br>
	 * <i>native declaration : line 635</i>
	 */
	int s7_get_conn(NativeLong cp_descr, short index, ShortBuffer number_ptr, ShortBuffer cref_ptr, byte[] conn_name);
/**
 * From the communication system, the S7 application only sees the symbolic
 * name of the S7 connection that is cumbersome during operation. For this
 * reason, the application uses the 's7_get_cref()' call to obtain a reference
 * to a symbolic connection name.
 *
 * @param cp_desc Handle as return value of the 's7_init()' call.
 * @param conn_name Symbolic name of the S7 connection on which communication
 * will take place.
 * @param cref_ptr Address of a variable of the type 'ord16' provided by the
 * user program. The connection reference is returned here.
 * 
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
*/
	@Deprecated 
	int s7_get_cref(NativeLong cp_descr, Pointer conn_name, ShortByReference cref_ptr);
	/**
	 * Original signature : <code>int32 s7_get_cref(ord32, char*, ord16*)</code><br>
	 * <i>native declaration : line 639</i>
	 */
	int s7_get_cref(NativeLong cp_descr, String conn_name, ShortBuffer cref_ptr);
        
        
/**
 * The 's7_get_cycl_read_abort_ind()' receives a cyclic read abort indication.
 * With the 's7_receive()' call, the user program receives the
 * 'S7_CYCL_READ_ABORT_IND' indication if the cyclic reading of the variable
 * was aborted. Following this, the corresponding processing function
 * 's7_get_cycl_read_delete_cnf()' must be called for internal processing in
 * the library.
 * Using the functions describes in the previous sections, cyclic reading of
 * variables can be initiated again.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
*/  
	int s7_get_cycl_read_abort_ind();
        
/**
 * The 's7_get_cycl_read_delete_cnf()' call receives the result of a
 * 's7_cycl_read_delete_req()' job.
 * With the 's7_receive()' call, the user program receives the 
 * 'S7_CYCL_READ_DELETE_CNF' confirmation if the remote partner executed the
 * job to delete cyclic reading of variables. Following this, the corresponding
 * processing function 's7_get_cycl_read_delete_cnf()' must be called for
 * internal processing in the library.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_cycl_read_delete_cnf();
        
	/**
	 * Original signature : <code>int32 s7_get_cycl_read_ind(void*, ord16*, ord16*, void*)</code><br>
	 * <i>native declaration : line 644</i><br>
	 * @deprecated use the safer methods {@link #s7_get_cycl_read_ind(com.sun.jna.Pointer, java.nio.ShortBuffer, java.nio.ShortBuffer, com.sun.jna.Pointer)} and {@link #s7_get_cycl_read_ind(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int s7_get_cycl_read_ind(Pointer od_ptr, ShortByReference result_array, ShortByReference var_length_array, Pointer value_array);
        
/**
 * The 's7_get_cycl_read_ind()' call receives the data sent by the server.
 * With the 's7_receive()' call, the user program receives the 
 * 'S7_CYCL_READ_IND' indication if a remote partner read a variable cyclically.
 * Following this, the corresponding processing function 
 * 's7_get_cycl_read_ind()' is called to copy the values that were read into
 * the user buffer.
 *
 * @param od_ptr The 'od_ptr' parameter is implemented to ensure compatibility
 * with other SAPI interfaces and must be assigned the NULL pointer, in other
 * words, the variable values are transferred on the SAPI-S7 programming
 * interface in the network representation.
 * @param result_array Address of an array of the type 'ord16' provided by the
 * user program. The array must contain at least as many elements as variables
 * that were read. The array elements contain the results of the read job in
 * the order in which the variables were specified in the request. The
 * following results are possible:<br>
 * <b>S7_RESULT_OK</b><br>
 * This value indicates that the access was possible and no error occurred.<br>
 * <b>S7_RESULT_HW_ERROR</b><br>
 * A hardware problem occurred.<br>
 * <b>S7_RESULT_OBJ_ACCESS_DENIED</b><br>
 * Access to a variable was denied.<br>
 * <b>S7_RESULT_OBJ_ADDRESS_INVALID</b><br>
 * The specified address is invalid.<br>
 * <b>S7_RESULT_OBJ_TYPE_NOT_SUPPORTED</b><br>
 * The server does not support the data type.<br>
 * <b>S7_RESULT_OBJ_TYPE_INCONSISTENT</b><br>
 * The data type of the variable is not consistent.<br>
 * <b>S7_RESULT_OBJ_NOT_EXISTS</b><br>
 * The variable does not exist.<br>
 * @param var_length_array Address of an array of the type 'ord16' provided by
 * the user program. The array must contain at least as many elements as
 * variables that were read. The individual array elements contain the length
 * of the data buffer. After the call, the elements of this array contain the
 * lengths of the variables that were read. The value '0' means that the
 * corresponding variable could not be read.
 * @param value_array Pointer to buffers provided by the user program. The
 * variable values that were read are entered in the buffers. Once again the
 * order is the same as specified in the request. When evaluating the buffer
 * contents, the data type must be taken into account.<br>
 * <b>It is also important to take into account that the variable values are 
 * saved byte aligned, in other words without padding bytes between two
 * components.</b><br>
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
*/
	int s7_get_cycl_read_ind(Pointer od_ptr, ShortBuffer result_array, ShortBuffer var_length_array, Pointer value_array);
        
/**
 * The 's7_get_cycl_read_init_cnf()' call receives the result of a 
 * 's7_cycl_read_init_req()' job .<br>
 * With the 's7_receive()' call, the user program receives the 
 * 'S7_CYCL_READ_INIT_CNF' confirmation if the remote partner executed the job
 * to prepare for cyclic reading of a variable. Following this, the
 * corresponding processing function 's7_get_cycl_read_init_cnf()' must be
 * called for internal processing in the library.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error such
 * as assigning new parameters for the call.<br>
 *
 */
	int s7_get_cycl_read_init_cnf();
        
/**
 * The 's7_get_cycl_read_start_cnf()' call receives the result of a 
 * 's7_cycl_read_start_req()' job .
 * With the 's7_receive()' call, the user program receives the 
 * 'S7_CYCL_READ_START_CNF' confirmation if the remote partner executed the job
 * to start cyclic reading of the variable. Following this, the corresponding
 * processing function 's7_get_cycl_read_start_cnf()' must be called for
 * internal processing in the library.
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_cycl_read_start_cnf();
        
/**
 * The 's7_get_cycl_read_stop_cnf()' call receives the result of a 
 * 's7_cycl_read_stop_req()' call.<br> 
 * With the 's7_receive()' call, the user program receives the
 * 'S7_CYCL_READ_STOP_CNF' confirmation if the remote partner executed the job
 * to stop cyclic reading of variables. Following this, the corresponding
 * processing function 's7_get_cycl_read_stop_cnf()' must be called for
 * internal processing in the library.
 * 
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br> 
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br> 
 */
	int s7_get_cycl_read_stop_cnf();
        
/**
 * With this call, the user program can query all the configured names of 
 * the communications processors installed in the communications 
 * system. The names are relevant for logging on with 's7_init()'.
 * To query all CPs, it is best to use a program loop. The 'index'
 * parameter is used as the loop variable and runs from 0 to
 * '*number_ptr-1'. The '*number_ptr' has the default 1.<br>
 *
 * @param index The 'index' parameter selects one of the existing CPs 
 * that are numbered continuously starting at 0.
 * @param number_ptr Address of a variable of the type 'ord16' provided by 
 * the user program. The number of installed CPs is returned here.
 * @param dev_name Start address of a memory area provided by the user 
 * program in which the configured CP name is entered. 
 * The memory area should be at least (S7_MAX_DEVICELEN + 1) bytes long for the
 * maximum S7_MAX_DEVICELEN bytes long CP name including the string end
 * identifier. 
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred 
 * executing the requested service. This is a temporary problem such as a
 * brief memory shortage. The call can be repeated without modifying the 
 * transferred parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the 
 * service to be repeated. Here, steps must be taken to eliminate the error 
 * such as assigning new parameters for the call.
 */
	@Deprecated 
	int s7_get_device(short index, ShortByReference number_ptr, Pointer dev_name);
	/**
	 * Original signature : <code>int32 s7_get_device(ord16, ord16*, char*)</code><br>
	 * <i>native declaration : line 651</i>
	 */
	int s7_get_device(short index, ShortBuffer number_ptr, byte[] dev_name);
        
/**
 * The 's7_get_initiate_cnf()' call, receives the result of the S7 connection
 * establishment.
 * With the 's7_receive()' call, the user program receives the 'S7_INITIATE_CNF'
 * confirmation if the establishment request was processed. Following this, the
 * corresponding processing function 's7_get_initiate_cnf()' must be called for
 * internal processing in the library.
 * The negotiated capability parameters (send credit, receive credit, PDU
 * length) are entered in the mini-DB and can then be read out with mini-DB
 * calls.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the 
 * service to be repeated. Here, steps must be taken to eliminate the error 
 * such as assigning new parameters for the call.
 *
 */
	int s7_get_initiate_cnf();
        
/**
 * The 's7_get_initiate_ind()' call receives a request to establish an S7
 * connection from the remote side.
 * With the 's7_receive()' call , the user program receives the 
 * 'S7_INITIATE_IND' indication if the remote partner wants to establish an
 * S7 connection. Following this, the corresponding processing function
 * 's7_get_initiate_ind()' must be called for internal processing in the
 * library.
 * The 's7_get_initiate_ind()' call enters the capability parameters of the
 * S7 connection in the mini-DB. Following this, further events can be
 * received from the communication system (for example via other S7
 * connections). An acceptance or rejection of the establishment request can be
 * delayed with the 's7_initiate_rsp()' call. 
 * By dividing the passive establishment into two parts the following is
 * possible:
 * ➢ With a simple call structure, the capability parameters can be checked
 * before the connection is established and 
 * ➢ The establishment request can be passed on to a different application that
 * decides whether or not the connection is established (the application has
 * gateway functions).
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred 
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
 */
	int s7_get_initiate_ind();
        
/**
 * The 's7_get_multiple_read_cnf()' call receives the variable values that
 * have been read.
 * With the 's7_receive()' call, the user program receives the 
 * 'S7_MULTIPLE_READ_CNF' confirmation if the read job was executed. Following
 * this, the corresponding processing function 's7_get_multiple_read_cnf()' must
 * be called for internal processing in the library. The call copies the values
 * that were read into the user buffer.
 *
 * @param od_ptr The 'od_ptr' parameter is implemented to ensure compatibility
 * with other SAPI interfaces and must be assigned the NULL pointer, in other
 * words, the variable values are transferred on the SAPI-S7 programming 
 * interface in the network representation.
 * @param result_array Address of an array of the type 'ord16' provided by the
 * user program. The array must contain at least as many elements as variables
 * that were read. The array elements contain the results of the read job in
 * the order in which the variables were specified in the request. The following
 * results are possible:<br>
 * S7_RESULT_OK This value indicates that the access was possible and no error
 * occurred.<br>
 * S7_RESULT_HW_ERROR A hardware problem occurred.<br>
 * S7_RESULT_OBJ_ACCESS_DENIED Access to a variable was denied.<br>
 * S7_RESULT_OBJ_ADDRESS_INVALID The specified address is invalid.<br>
 * S7_RESULT_OBJ_TYPE_NOT_SUPPORTED The server does not support the data type.<br>
 * S7_RESULT_OBJ_TYPE_INCONSISTENT The data type of the variable is not consistent.<br>
 * S7_RESULT_OBJ_NOT_EXISTS The variable does not exist.<br>
 * 
 * @param var_length_array Address of an array of the type 'ord16' provided by
 * the user program. The array must contain at least as many elements as 
 * variables that were read. The individual array elements contain the length
 * of the data buffer. After the call, the elements of this array contain the
 * lengths of the variables that were read.
 * The value '0' means that the corresponding variable could not be read.
 * 
 * @param value_array Pointer to buffers provided by the user program. The
 * variable values that were read are entered in the buffers. Once again the
 * order is the same as specified in the request. When evaluating the buffer
 * contents, the data type must be taken into account.
 * <b>It is also important to take into account that the variable values are
 * saved byte aligned, in other words without padding bytes between two 
 * components.</b>
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	@Deprecated 
	int s7_get_multiple_read_cnf(Pointer od_ptr, ShortByReference result_array, ShortByReference var_length_array, Pointer value_array);
	/**
	 * Original signature : <code>int32 s7_get_multiple_read_cnf(void*, ord16*, ord16*, void*)</code><br>
	 * <i>native declaration : line 655</i>
	 */
	int s7_get_multiple_read_cnf(Pointer od_ptr, ShortBuffer result_array, ShortBuffer var_length_array, Pointer value_array);

/**
 * The 's7_get_multiple_write_cnf()' call receives the result of the write
 * variable job.
 * With the 's7_receive()' call, the user program receives the 
 * 'S7_MULTIPLE_WRITE_CNF' confirmation if the write job was executed.
 * Following this, the corresponding processing function 
 * 's7_get_multiple_write_cnf()' must be called for internal processing in
 * the library.
 *
 * @param result_array Address of an array of the type 'ord16' provided by
 * the user program. The array must contain at least as many elements as
 * variables that were read. The array elements contain the results of the read
 * job in the order in which the variables were specified in the request. The
 * following results are possible:<br>
 * <b>S7_RESULT_OK</b><br>
 * This value indicates that the access was possible and no error occurred.<br>
 * <b>S7_RESULT_HW_ERROR</b><br>
 * A hardware problem occurred.<br>
 * <b>S7_RESULT_OBJ_ACCESS_DENIED</b><br>
 * Access to a variable was denied.<br>
 * <b>S7_RESULT_OBJ_ADDRESS_INVALID</b><br>
 * The specified address is invalid.<br>
 * <b>S7_RESULT_OBJ_TYPE_NOT_SUPPORTED</b><br>
 * The server does not support the data type.<br>
 * <b>S7_RESULT_OBJ_TYPE_INCONSISTENT</b>
 * The data type of the variable is not consistent.<br>
 * <b>S7_RESULT_OBJ_NOT_EXISTS</b><br>
 * The variable does not exist. <br>
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the 
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */        
	@Deprecated 
	int s7_get_multiple_write_cnf(ShortByReference result_array);
	/**
	 * Original signature : <code>int32 s7_get_multiple_write_cnf(ord16*)</code><br>
	 * <i>native declaration : line 659</i>
	 */
	int s7_get_multiple_write_cnf(ShortBuffer result_array);
        
/**
 * The 's7_get_read_cnf()' call receives a variable value that has be read.
 * With the 's7_receive()' call, the user program receives the 'S7_READ_CNF'
 * confirmation if the read job could be executed. 
 * Following this, the corresponding processing function 's7_get_read_cnf()'
 * must be called for internal processing in the library so that the values
 * can be copied to the user buffer.
 *
 * @param od_ptr The 'od_ptr' parameter is implemented to ensure compatibility 
 * with other SAPI interfaces and must be assigned the NULL pointer, in other
 * words, the variable values are transferred on the SAPI-S7 programming
 * interface in the network representation.
 * @param var_length_ptr Address of a variable of the type 'ord16' provided by
 * the user program. Here, the length of the data buffer is specified. After
 * the call, the parameter contains the length of the variable that was read.
 * @param value_ptr Pointer to a buffer provided by the user program. Here, the
 * variable content that was read is saved in the network representation.
 * When evaluating the content of the buffer, the data type of the variable
 * must be taken into account.<br>
 * <b>It is also important to take into account that the variable values are
 * saved byte aligned, in other words without padding bytes between two components.</b>
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	@Deprecated 
	int s7_get_read_cnf(Pointer od_ptr, ShortByReference var_length_ptr, Pointer value_ptr);
	/**
	 * Original signature : <code>int32 s7_get_read_cnf(void*, ord16*, void*)</code><br>
	 * <i>native declaration : line 660</i>
	 */
	int s7_get_read_cnf(Pointer od_ptr, ShortBuffer var_length_ptr, Pointer s7_bsend_req);

/**
 * With this call, the user program can query all the configured VFDs of a 
 * communications processor that were assigned connetions. The VFD names are
 * relevant for the logon with 's7_init()'.
 * <i>Querying All VFDs</i> To query all VFDs, it is best to use a program loop.
 * The 'index' parameter is used as the loop variable and runs from 0 to
 * '*number_ptr-1'. The '*number_ptr' has the default 1.
 *
 * @param device_name Configured name of the communications processor via 
 * which you want to communicate. For this parameter a CP name read out with 
 * 's7_get_device()' is usually used. It must match a configured CP name
 * (for example 'CP_L2_1:').
 * 
 * @param index The 'index' parameter selects one of the existing CPs that are
 * numbered continuously starting at 0.
 * @param number_ptr Address of a variable of the type 'ord16' provided by the
 * user program. The number of configured VFDs is returned here.
 * @param vfd_name Start address of a memory area provided by the user program
 * in which the configured VFD name is entered. The memory area should be at
 * least (S7_MAX_NAMLEN + 1) bytes long for the maximum S7_MAX_NAMLEN byte
 * long VFD name including the string end identifier.
 * @return S7_OK The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the 
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
 */        
	@Deprecated 
	int s7_get_vfd(Pointer dev_name, short index, ShortByReference number_ptr, Pointer vfd_name);
	/**
	 * Original signature : <code>int32 s7_get_vfd(char*, ord16, ord16*, char*)</code><br>
	 * <i>native declaration : line 663</i>
	 */
	int s7_get_vfd(String dev_name, short index, ShortBuffer number_ptr, byte[] vfd_name);
        
/**
 * The 's7_get_vfd_state_cnf()' call receives the result of a VFD status job.
 * With the 's7_receive()' call, the user program receives the 
 * 'S7_VFD_STATE_CNF' confirmation if the status job was executed. 
 * Following this, the corresponding processing function 
 * 's7_get_vfd_state_cnf()' must be called for internal processing in the 
 * library.
 * With the 's7_get_vfd_state_cnf()' call, the values that were read (the 
 * physical and logical status of the VFD and the local status of the 
 * application) are copied to the user buffer.
 *
 * @param log_state_ptr Address of a variable of the type 'ord16' provided by
 * the user program. The logical status of the VFD is entered here. This
 * parameter specifies which services can currently be used.
 * 'S7_STATE_CHANGES_ALLOWED' is the only possible state meaning that all
 * services are permitted.
 * @param phy_state_ptr Address of a variable of the type 'ord16' provided by
 * the user program. The physical status of the VFD is entered here. The value
 * of this parameter is derived from the states of the resources. If
 * 'S7_OPERATIONAL' is set, the VFD is completely functional. In the status
 * 'S7_NEEDS_COMMISSIONING' local intervention is necessary to change to an
 * operable status.
 * @param local_detail_ptr Pointer to a buffer provided by the user program that
 * must have a minimum size of 3 bytes. The local status of the application and
 * device are entered here. The meaning of the 3 bytes depends on the particular
 * VFD and can be found in the description of the VFD.
 * 
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 *
 */
	@Deprecated 
	int s7_get_vfd_state_cnf(ShortByReference log_state_ptr, ShortByReference phy_state_ptr, Pointer local_detail_ptr);
	/**
	 * Original signature : <code>int32 s7_get_vfd_state_cnf(ord16*, ord16*, ord8*)</code><br>
	 * <i>native declaration : line 666</i>
	 */
	int s7_get_vfd_state_cnf(ShortBuffer log_state_ptr, ShortBuffer phy_state_ptr, ByteBuffer local_detail_ptr);
        
	/**
	 * Original signature : <code>int32 s7_get_vfd_ustate_ind(ord16*, ord16*, ord8*)</code><br>
	 * <i>native declaration : line 669</i><br>
	 * @deprecated use the safer methods {@link #s7_get_vfd_ustate_ind(java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ByteBuffer)} and {@link #s7_get_vfd_ustate_ind(com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int s7_get_vfd_ustate_ind(ShortByReference log_state_ptr, ShortByReference phy_state_ptr, Pointer local_detail_ptr);
	/**
	 * Original signature : <code>int32 s7_get_vfd_ustate_ind(ord16*, ord16*, ord8*)</code><br>
	 * <i>native declaration : line 669</i>
	 */
	int s7_get_vfd_ustate_ind(ShortBuffer log_state_ptr, ShortBuffer phy_state_ptr, ByteBuffer local_detail_ptr);
        

/**
 * The 's7_get_write_cnf()' call receives the result of the write variable job.
 * With the 's7_receive()' call, the user program receives the 'S7_WRITE_CNF'
 * confirmation if the write job was executed. Following this, the corresponding
 * processing function 's7_get_write_cnf()' must be called for internal
 * processing in the library. 
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
 */
	int s7_get_write_cnf();
        
/**
 * With this call, the user program logs on at a VFD of an underlying 
 * communications system. 
 * As input parameters, the user program specifies the configured name
 * of the communications processor via which communication will take
 * place and the configured name of the VFD whose resources and services
 * will be used.<br>
 * The user program receives a descriptor 'cp_descr' that must be specified
 * for all subsequent calls as an addressing parameter for the selected
 * CP and VFD until the application logs off.<br>
 * When the program logs on, the configuration information (for example,
 * the list of all S7 connections) is read from a file with a name derived
 * from the name of the CP as follows: The colon completing the CP
 * name is removed and the name extension '.LDB' is added. This assumes that
 * the file exists in the current working directory. As an alternative, the
 * name of the configuration file can also be assigned (using any name) in
 * the environment variable.
 * If several VFDs are being used at the same time in one or more
 * communications processors by one application, a corresponding number of
 * 's7_init()' calls are necessary.<br>
 *
 * @param device_name Configured name of the communications processor with
 * which communication will take place. To address a specific module, the
 * user program uses a CP name configured with the SIMATIC NET installation
 * tool (for example 'CP_L2_1:'). Normally a CP name read out with
 * 's7_get_device()' is used.
 * 
 * @param vfd_name Configured name of the local VFD at which the application
 * logs on. To address a particular VFD,the user program uses a VFD name
 * specified with the SIMATIC NET configuration tool. By selecting the VFD,
 * the configured S7 connections are also selected. Here, a VFD name read out
 * with 's7_get_vfd()' is normally used.
 * 
 * @param cp_descr_ptr Address of a variable of the type 'ord32' provided by
 * the user program. Here, a descriptor for addressing the selected
 * communications processor and VFD is entered. This parameter must be used for
 * further communication via the selected communications processor and VFD.
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred 
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the 
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
*/
	@Deprecated 
	int s7_init(Pointer cp_name, Pointer vfd_name, NativeLongByReference cp_descr_ptr);
	/**
	 * Original signature : <code>int32 s7_init(char*, char*, ord32*)</code><br>
	 * <i>native declaration : line 673</i>
	 */
	int s7_init(String cp_name, String vfd_name, NativeLongByReference cp_descr_ptr);
        
/**
 * The 's7_initiate_req()' call initiates the establishment of an S7 connection.
 * The initiative for establishing a connection comes from the user program,
 * the required parameters are read from the mini-DB.
 * They can be read, modified and adapted to the current requirements by the
 * user program.
 * On the partner (passive side), the configured capability parameters are
 * compared with the received values of the job. The capability of the S7
 * connection (send credit, receive credit, PDU size..) that can be implemented
 * is determined by the lowest values of these parameters on either station.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference to the S7 connection that will be established.
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_initiate_req(NativeLong cp_descr, short cref);
        
/**
 * Using the 's7_initiate_rsp()' call, the user program decides about a passive
 * establishment request.
 * The passive establishment of an S7 connection is in two parts as follows:
 * ➢ With the 's7_get_initiate_ind()' call, the capability parameters are
 * entered in the mini-DB and can be read out. It is then possible to receive
 * further events from the communications system (for example via other S7
 * connections).
 * ➢ The establishment request is granted or rejected with the 
 * 's7_initiate_rsp()' call.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference to the S7 connection that will be established.
 * @param accept The establishment request can be accepted with this parameter
 * ('accept=S7_ACCEPT') or rejected ('accept= S7_NON_ACCEPT').
 * 
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_initiate_rsp(NativeLong cp_descr, short cref, short accept);
        
/**
 * This call returns a string that describes the error indicated by the IEC
 * error code. This is an error string that can, for example, be displayed
 * on an operator console or written to a log file etc.
 *
 * @param None
 */
	String s7_last_iec_err_msg();
        
/**
 * The error identifiers are reduced to a practical number by the S7 library to
 * allow error handling to be implemented more simply in applications.
 * According to IEC 1131 (International Electrotechnical Commission), there
 * are standard error codes that can be read out with this call.
 *
 * @param None
 * @return The possible return values and their significance:<br>
 * <b>S7_ERR_IEC_NO</b><br>
 * No error occurred.<br>
 * <b>S7_ERR_IEC_DATA_TYPE_MISMATCH</b><br>
 * The data types do not match.<br>
 * <b>S7_ERR_IEC_INVALID_REF</b><br>
 * The specified S7 connection reference does not exist.<br>
 * <b>S7_ERR_IEC_LOWER_LAYER</b><br>
 * An error occurred in the lower layers.<br>
 * <b>S7_ERR_IEC_NEG_RESPONSE</b><br>
 * The client has received a negative response from the communications partner.<br>
 * <b>S7_ERR_IEC_NO_ACCESS_TO_REM_OBJECT</b><br>
 * Access to an object was rejected.<br>
 * <b>S7_ERR_IEC_PARTNER_IN_WRONG_STATE</b><br>
 * The partner station is in a status in which the requested job cannot be
 * processed.<br>
 * <b>S7_ERR_IEC_RECEIVER_DISABLED</b><br>
 * The server is not responding.<br>
 * <b>S7_ERR_IEC_RECEIVER_OVERRUN</b><br>
 * The resources in the server are exhausted.<br>
 * <b>S7_ERR_IEC_RESET_RECEIVED</b><br>
 * A reset request has been received.<br>
 * 
 */
	short s7_last_iec_err_no();
        
/**
 * This call provides an error message about the detailed error number that
 * describes the error that has occurred and provides information about
 * eliminating the error. This is an error string that can, for example,
 * be displayed on an operator console or written to a log file etc.
 *
 * @param None
 * @return Error message
 *
 */
	String s7_last_detailed_err_msg();
        
/**
 * With this call, the caller receives an error number that provides more
 * detailed information about the cause of the error than the standard IEC
 * error codes.
 *
 * @param None
 * @return The possible return values and their significance:<br>
 * <b>S7_ERR_NO_ERROR</b><br>
 * No error occurred.<br>
 * <b>S7_ERR_CONN_ABORTED</b><br>
 * The S7 connection was aborted.<br>
 * <b>S7_ERR_CONN_CNF</b><br>
 * The S7 connection could not be established.<br>
 * <b>S7_ERR_CONN_NAME_NOT_FOUND</b><br>
 * The specified S7 connection name was not found.<br>
 * <b>S7_ERR_FW_ERROR</b><br>
 * A firmware error has occurred on the communications processor.<br>
 * <b>S7_ERR_INSTALL</b><br>
 * When installing the SIMATIC NET driver or initializing the
 * communications processor an error occurred that makes
 * communication impossible.<br>
 * <b>S7_ERR_INTERNAL_ERROR</b><br>
 * During communication, library-internal data were overwritten making it
 * impossible to continue operating the application.<br>
 * <b>S7_ERR_INVALID_CONN_STATE</b><br>
 * The job that has been sent is not permitted in the current status of the
 * S7 connection.<br>
 * <b>S7_ERR_INVALID_CREF</b><br>
 * The specified S7 connection reference is invalid.<br>
 * <b>S7_ERR_INVALID_CYCL_READ_STATE</b><br>
 * The job is not permitted in the current status of the cyclic read job.<br>
 * <b>S7_ERR_INVALID_DATARANGE_OR_TYPE</b><br>
 * Input parameter of the called function outside the valid range of values.<br>
 * <b>S7_ERR_INVALID_DATA_SIZE</b><br>
 * The data buffer provided by the user program is too small.<br>
 * <b>S7_ERR_INVALID_ORDERID</b><br>
 * There is no job with the specified job identifier (parameter 'orderid').<br>
 * <b>S7_ERR_INVALID_PARAMETER</b><br>
 * A transferred parameter or a specified value in a transferred structure is
 * invalid.<br>
 * <b>S7_ERR_MAX_REQ</b><br>
 * The maximum number of acknowledged jobs negotiated during connection
 * establishment has already been sent.<br>
 * <b>S7_ERR_MINI_DB_TYPE</b><br>
 * The 'type' parameter is not permitted in a mini-DB call.<br>
 * <b>S7_ERR_MINI_DB_VALUE</b><br>
 * The 'value' parameter is not permitted in a mini-DB call.<br>
 * <b>S7_ERR_NO_LICENCE</b><br>
 * The license required for the product could not be found.<br>
 * <b>S7_ERR_NO_RESOURCE</b><br>
 * The resources available are currently exhausted.<br>
 * <b>S7_ERR_NO_SIN_SERV</b><br>
 * The SIMATIC NET server required for S7 applications under Windows
 * that sends messages to the relevant application could not be started.<br>
 * <b>S7_ERR_OBJ_ACCESS_DENIED</b><br>
 * Access to the required object was rejected.<br>
 * <b>S7_ERR_OBJ_ATTR_INCONSISTENT</b><br>
 * The OD or the attributes of the addressed object are inconsistent.<br>
 * <b>S7_ERR_OBJ_UNDEFINED</b><br>
 * The object to be accessed does not exist.<br><b>S7_ERR_ORDERID_USED</b></br>
 * The job identifier transferred with the call (parameter 'orderid') is
 * already being used.<br>
 * <b>S7_ERR_RECEIVE_BUFFER_FULL</b><br>
 * A message was received however the corresponding processing function has
 * not yet been called.<br>
 * <b>S7_ERR_SERVICE_NOT_SUPPORTED</b><br>
 * The requested service is not supported.<br>
 * <b>S7_ERR_SERVICE_VFD_ALREADY_USED</b><br>
 * The application or a different process has already logged on at the VFD.<br>
 * <b>S7_ERR_SYMB_ADDRESS</b><br>
 * The symbolic address transferred in the job is incorrect.<br>
 * <b>S7_ERR_SYMB_ADDRESS_INCONSISTENT</b><br>
 * The size of the user data contained in the symbolic address and the size
 * of the user buffer are contradictory.<br>
 * <b>S7_ERR_TOO_LONG_DATA</b><br>
 * There are more data to be written than permitted by the standard.<br>
 * <b>S7_ERR_UNKNOWN_ERROR</b><br>
 * An unknown error has occurred.<br>
 * <b>S7_ERR_WRONG_CP_DESCR</b><br>
 * The CP descriptor in the call is incorrect.<br>
 * <b>S7_ERR_WRONG_IND_CNF</b>
 * The wrong processing function was called for a received message.<br>
 *
 */
	short s7_last_detailed_err_no();
        
/**
 * With this call, the settings are read out of the mini-DB. The user
 * specifies an identifier for the setting to be read and receives a string
 * that must be interpreted depending on the identifier.
 *
 * @param type Identifier for the data to be read. The possible values are
 * described below.
 *
 *@return The mini-DB allows all the modifiable settings of the trace to be
 * read at any time. These are as follows:<br>
 * <b>S7_MINI_DB_TRACE_FILENAME</b><br>
 * With this parameter, the name of the trace file is returned.<br>
 * <b>S7_MINI_DB_TRACE_TARGET</b><br>
 * With this parameter, the target of the trace is output.<br>
 * <b>S7_MINI_DB_TRACE_DEPTH</b><br>
 * With this parameter, the trace depth can be queried.<br>
 * <b>S7_MINI_DB_TRACE_SELECT</b><br>
 * With this parameter, the service classes that were activated for the
 * trace are indicated.<br><br>
 * The return values correspond to the specified values in the 
 * 's7_mini_db_set()' call.<br><br>
 * <b>Return Values for Establishing an S7 Connection</b><br><br>
 * After receiving an initiate confirmation, the performance parameters
 * negotiated between client and server are entered in the mini-DB by the
 * corresponding processing function 's7_get_initiate_cnf()'.<br><br>
 * <b>S7_MINI_DB_INIT_IND_AMQ_CALLING</b><br>
 * After receiving the initiate indication, this value informs the passive
 * partner how many jobs the active partner on the connection can receive at
 * the same time.<br><br>
 * <b>S7_MINI_DB_INIT_IND_AMQ_CALLED</b><br>
 * After receiving the initiate indication, this value informs the passive
 * partner how many jobs the active partner on the connection can send at the
 * same time.<br><br>
 * <b>S7_MINI_DB_INIT_IND_PDU_SIZE</b><br>
 * After receiving the initiate indication, this value informs the passive
 * partner how much data the active partner can receive on this connection.<br><br>
 * <b>S7_MINI_DB_INIT_CNF_AMQ_CALLING</b><br>
 * After active connection establishment, this value indicates the number of
 * acknowledged jobs that can be received at the same time on this connection.
 * The value was negotiated by the partners when the connection was
 * established.<br><br>
 * <b>S7_MINI_DB_INIT_CNF_AMQ_CALLED</b><br>
 * After active connection establishment, this value indicates the number of
 * acknowledged jobs that can be sent at the same time on this connection.
 * The value was negotiated by the partners when the connection was
 * established.<br><br>
 * <b>S7_MINI_DB_INIT_CNF_PDU_SIZE</b><br>
 * After active connection establishment, this value indicates the maximum
 * PDU size on this connection. The value was negotiated by the partners when
 * the connection was established.<br><br>
 * 
 */
	String s7_mini_db_get(short type);
        
/**
 * With this call, settings in the mini-DB are overwritten to be able to adapt
 * the establishment of an S7 connection, the trace and querying errors in a
 * wide range of differing situations. There is a limited number of combinations
 * of data and values as described below.
 *
 * @param type Identifier for the setting to be modified. The possible transfer
 * values are described below.
 * @param value New value for the setting to be modified. The value is always
 * transferred as a string. Defines are available for this in the header file
 * 'SAPI_S7.H' that correspond to the numbers as ASCII character strings.
 * If you require combinations of individual values, you must first convert the
 * individual defines into integers or perform logic operations on them and then
 * reconvert the result to a string.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 * <br>
 * The trace is a simple and yet effective aid to debugging for the S7 library.
 * It can be adapted to an extremely wide range of applications. 
 * The permitted combinations of values are described below starting with the
 * 'type' parameter.
 * With SAPI-S7 libraries from Version V 1.371.2002 onwards, it is possible to
 * distribute the trace output among several files. This prevents the trace
 * file growing too large. The number and size of the files can be set with the
 * parameters S7_MINI_DB_TRACE_MAXFILES and S7_ MINI_DB _TRACE_MAXLINES.<br>
 * <b>S7_MINI_DB_TRACE_FILENAME</b><br>
 * This parameter value specifies the name of the trace file. The file name is
 * transferred as 'value' (default: 'S7TRACE.TXT' in the current working
 * directory).<br>
 * <b>S7_MINI_DB_TRACE_TARGET</b><br>
 * This value specifies the target for the trace.<br>
 * <table border="1">
 * <tr>
 * <th>Parameter 'value'</th><th> Description</th>
 * </tr>
 * <tr><td>S7_TRACE_TARGET_BUFFER</td><td>The trace entries are written to
 * an internal ring buffer (default setting).</td></tr>
 * <tr><td>S7_TRACE_TARGET_OLD_FILE</td><td> The trace entries are written to
 * a file. Any trace file that already exists remains unmodified. Trace entries
 * that follow are appended to the trace file.</td></tr>
 * <tr><td>S7_TRACE_TARGET_NEW_FILE</td><td> The trace entries are written to
 * a file. A new file is created. Subsequent trace entries are appended. It is
 * possible with this setting to avoid the trace file becoming far too
 * large.</td></tr>
 * <tr><td>S7_TRACE_TARGET_CONSOLE</td><td> The trace entries are passed on
 * to another application. What then takes place depends on the operating
 * system.</td></tr>
 * </table><br><br>
 * <b>S7_ MINI_DB_TRACE_MAXFILES</b><br>
 * The trace is a cyclic buffer with a number of files specified in the
 * S7_MINI_DB_TRACE_MAXFILES parameter. Once a file has reached the maximum
 * length, a new file is created. When all files have reached the maximum
 * length, the oldest is overwritten. Values between 1 and 999 can be set.
 * The default value is 2.<br><br>
 * <b>S7_MINI_DB_TRACE_MAXLINES</b><br>
 * This sets the size of the S7_Trace files.
 * Values between 1 and 22-1 can be set. The size should be adapted to the
 * available memory.
 * The default value is 10.000.<br><br>
 * <b>S7_MINI_DB_TRACE_DEPTH</b><br>
 * This sets the trace depth.<br><br>
 * <table border="1">
 * <tr><th>Parameter 'value'</th><th> Description</th></tr>
 * <tr><td>S7_TRACE_DEPTH_OFF</td><td> Switches the trace off.</td></tr>
 * <tr><td>S7_TRACE_DEPTH_USER</td><td> With this setting (default) only
 * the strings specified by the user program with the 's7_trace()' function are
 * entered in the trace.</td></tr>
 * <tr><td>S7_TRACE_DEPTH_EXCEPT</td><td> This setting only allows trace
 * entries following error events or incorrect results.</td></tr>
 * <tr><td>S7_TRACE_DEPTH_INTERFACE</td><td> With this setting, parameters
 * transferred to the SAPI-S7 programming interface are entered in the trace.
 * This allows incorrect parameters to be detected quickly and without using a
 * debugger.</td></tr>
 * <tr><td>S7_TRACE_DEPTH_OTHER</td><td> This setting provides further 
 * information.</td></tr>
 * </table><br><br>
 *
 * <b>S7_MINI_DB_TRACE_SELECT</b><br>
 * To be able to activate the trace for specific service classes, a define is
 * available in the header file 'SAPI_S7.H' for each service class. The defines
 * can be combined as explained above.<br>
 * <table border="1">
 * <tr><th>Parameter 'value'</th><th>Description</th></tr>
 * <tr><td>S7_TRACE_SELECT_ADMIN_SERVICES</td><td> Activates the trace for the
 * administrative services.</td></tr>
 * <tr><td>S7_TRACE_SELECT_CONN_SERVICES</td><td> Activates the trace for the
 * S7 connection management services.</td></tr>
 * <tr><td>S7_TRACE_SELECT_VAR_SERVICES</td><td> Activates the trace for the
 * variable services.</td></tr>
 * <tr><td>S7_TRACE_SELECT_CYCL_VAR_SERVICES</td><td> Activates the trace for
 * the cyclic variable services.</td></tr>
 * <tr><td>S7_TRACE_SELECT_RECEIVE_SERVICES</td><td> Activates the trace for the
 * receive call.</td></tr>
 * <tr><td>S7_TRACE_SELECT_VFD_SERVICES</td><td> Activates the trace for the
 * VFD services.</td></tr>
 * <tr><td>S7_TRACE_SELECT_OTHER_SERVICES</td><td> Activates the trace for
 * functions accessing the mini-DB.</td></tr>
 * <tr><td>S7_TRACE_SELECT_PBK_SERVICES</td><td> Activates the trace for the
 * blockoriented services.</td></tr>
 * <tr><td>S7_TRACE_SELECT_ALL</td><td> Activates the trace for all service
 * classes.</td></tr>
 *  </table><br><br>
 * <b>Possible Combinations of Values for Establishing S7 Connections</b>
 * <b>S7_MINI_DB_TRACE_NO_LINES</b><br>
 * This parameter is used to modify the number of lines in the internal
 * ring buffer. For applications that require a lot of memory, the ring buffer
 * can be reduced in size or increased in size to record the history when
 * errors occur. The function 's7_write_trace_buffer()' allows the ring buffer
 * to be written to a file.<br><br>
 * <b>Changing this parameter is only effective if the change precedes
 *  the first S7 library call.</b><br><br>
 * For the S7 connection establishment, it is possible to assign defaults
 * for various connection parameters negotiated by the stations. The permitted
 * combinations of values are described below starting with the 'type'
 * parameter.<br><br>
 * <b>S7_MINI_DB_INIT_REQ_AMQ_CALLING</b><br>
 * This value specifies how many acknowledged jobs can be received at the same
 * time on the connection by the active partner (default: '3'). The value is a
 * proposal that can be accepted or reduced by the partner station. The
 * negotiated value can be read out by the function 's7_mini_db_get()'.<br><br>
 * <b>S7_MINI_DB_INIT_REQ_AMQ_CALLED</b><br>
 * This value specifies how many acknowledged jobs can be sent at the same time
 * on the connection by the active partner (default: '3'). The value is a
 * proposal that can be accepted or reduced by the partner station. The
 * negotiated value can be read out by the function 's7_mini_db_get()'.<br><br>
 * <b>S7_MINI_DB_INIT_REQ_PDU_SIZE</b><br>
 * This value specifies the maximum size of a PDU on this connection for the
 * active partner (default: '0x100'). The value is a proposal that can be
 * accepted or reduced by the partner station. The negotiated value can be read
 * out by the function 's7_mini_db_get()'.<br><br>
 * <b>S7_MINI_DB_INIT_RSP_AMQ_CALLING</b><br>
 * This value specifies how many acknowledged jobs can be sent at the same time
 * on the connection by the passive partner (default: '3'). The lower of the
 * values set for the active or passive side is negotiated.<br><br>
 * <b>S7_MINI_DB_INIT_RSP_AMQ_CALLED</b><br>
 * This value specifies how many acknowledged jobs can be received at
 * the same time on the connection by the passive partner (default: '3').
 * The lower of the values set for the active or passive side is negotiated.<br><br>
 * <b>S7_MINI_DB_INIT_RSP_PDU_SIZE</b><br>
 * This value specifies the maximum size of a PDU on this connection for
 * the passive partner (default: '0x100'). The lower of the values set for
 * the active or passive side is negotiated.<br><br>
 * <b>S7_MINI_DB_PERSISTANCE_COUNT</b><br>
 * This value sets the number of attempts at active connection establishment
 * (default: '5'). When the partner station has rejected the establishment
 * request this number of times, the establishment is terminated and a negative
 * acknowledgment sent to the user program.
 * This value can have a different meaning with certain SIMATIC NET products.
 * In this case, the meaning is explained in the relevant product information.<br><br>
 * <b>S7_MINI_DB_ABORT_TIMEOUT</b><br>
 * This value specifies how long a station can attempt to establish a connection
 * if the remote station does not respond. The value is set in multiples
 * of 51 ms (default: '3000'). The parameter applies both to the connection
 * establishment and to the data transfer phase. This value can have a different
 * meaning with certain SIMATIC NET products. In this case, the meaning is
 * explained in the relevant product information.
 * This value is irrelevant for TCP/IP protocols.<br><br>
 *
 */
	@Deprecated 
	int s7_mini_db_set(short type, Pointer value);
	/**
	 * Original signature : <code>int32 s7_mini_db_set(ord16, char*)</code><br>
	 * <i>native declaration : line 683</i>
	 */
	int s7_mini_db_set(short type, String value);
        
/**
 * With the 's7_multiple_read_req()' call, a client application can read one
 * or more variables on the server at the same time. The variables can only be
 * accessed using their symbolic addresses. The data are transferred in the
 * confirmation from the server to the client and transferred to the user buffer
 * by the corresponding processing function ('s7_get_multiple_read_cnf()').
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection via which the job will be sent.
 * @param orderid Job identifier to identify the job to be sent and the
 * corresponding confirmation.
 * @param number Number of variables to be read.
 * @param read_para_array Pointer to an array provided by the user program with
 * a total of 'number' elements of the following structure, where the nth
 * element describes the nth variable:<br>
 * struct S7_READ_PARA
 * {    ord16 access;
 *      char var_name[S7_MAX_NAMLEN+2];
 *      ord16 index;
 *      ord16 subindex;
 *      ord16 address_len;
 *      ord8 address[S7_MAX_ADDRESSLEN];
 * }<br>
 * The 'access' parameter indicates the type of access. With 
 * 'S7_ACCESS_SYMB_ADDRESS', the symbolic address in the 'var_name' field is
 * expected.<br>
 * The 'var_name' parameter specifies the symbolic address of the variable to be
 * read and is evaluated if the variable is to be accessed by its symbolic
 * address ('access=S7_ACCESS_SYMB_ADDRESS'). (Please refer to the general
 * information about variable addressing at the start of this section.)<br>
 * The 'index' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'subindex' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'address_len' parameter is irrelevant and only implemented for reasons
 * of compatibility with other SAPI interfaces.<br>
 * The 'address' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * 
 * @return <b>S7_OK</b> The function was processed without errors.
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.
 * The maximum length of the variable addresses and result data depends on the
 * negotiated PDU size. For details of the PDU size, refer to Section 3.4.2,
 * 's7_get_initiate_cnf', page 64 (formulas for calculating intermediate values
 * in Section 7.3, page 207). The following table shows examples:
 * PDU Size
 * (bytes)
 * Maximum Number
 * of Variable
 * Addresses
 * Maximum Length of the
 * Result Data with the
 * Maximum Number of
 * Variable Addresses
 * 240 19 150
 * 256 20 162
 * 480 39 310
 * 960 79 630
 */
	int s7_multiple_read_req(NativeLong cp_descr, short cref, short orderid, short number, S7_READ_PARA read_para_array);
        
/**
 * With the 's7_multiple_write_req()' call, a client application can write to
 * one or more variables of a server at the same time. The variables can
 * only be accessed using their symbolic addresses. The data are transferred in
 * the request from the client to the server.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection via which the job will be sent.
 * @param orderid Job identifier to identify the job to be sent and the 
 * corresponding confirmation.
 * @param number Number of variables to be written.
 * @param write_para_array Pointer to an array provided by the user program
 * with a total of 'number' elements of the following structure, where the nth
 * element describes the nth variable:<br>
 * struct S7_WRITE_PARA<br>
 * {<br>
 *      ord16 access;<br>
 *      char var_name[S7_MAX_NAMLEN+2];<br>
 *      ord16 index;<br>
 *      ord16 subindex;<br>
 *      ord16 address_len;<br>
 *      ord8 address[S7_MAX_ADDRESSLEN];<br>
 *      ord16 var_length;<br>
 *      ord8 value[S7_MAX_BUFLEN_MULTIPLE];<br>
 * }<br>
 * The 'access' parameter indicates the type of access. With 
 * 'S7_ACCESS_SYMB_ADDRESS', the symbolic address in the 'var_name' field is 
 * expected.<br>
 * The 'var_name' parameter specifies the symbolic address of the variable to be
 * read and is evaluated if the variable is to be accessed by its symbolic
 * address ('access=S7_ACCESS_SYMB_ADDRESS'). (Please refer to the general
 * information about variable addressing at the start of this section.)<br>
 * The 'index' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'subindex' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'address_len' parameter is irrelevant and only implemented for reasons
 * of compatibility with other SAPI interfaces.<br>
 * The 'address' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'var_length' parameter specifies the number of relevant and valid bytes
 * in the data buffer 'value'.<br>
 * The 'value' buffer contains the value of the variable to be written in the
 * network representation. When evaluating the content of the buffer, the data
 * type of the variable must be taken into account.<br>
 * <b>It is also important to take into account that the variable values are
 * saved byte aligned, in other words without padding bytes between two 
 * components.</b>
 * 
 * @param od_ptr The 'od_ptr' parameter is implemented to ensure compatibility
 * with other SAPI interfaces and must be assigned the NULL pointer; in other
 * words, the variable values are transferred on the SAPI-S7 programming
 * interface in the network representation.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error 
 * such as assigning new parameters for the call.<br>
 * <b>Amounts of Data</b> The maximum number of variable addresses and maximum
 * length of the user data depends on the negotiated PDU size. For details of
 * the PDU size, refer to Section 3.4.2, 's7_get_initiate_cnf', page 64
 * (formulas for calculating intermediate values in Section 7.3, page 208).
 * The following table shows examples:<br>
 * PDU Size
 * (bytes)
 * Maximum Number
 * of Variable
 * Addresses
 * Maximum Length of the User
 * Data with the Maximum
 * Number of Variable Addresses
 * 240 12 36
 * 256 13 36
 * 480 26 52
 * 960 52 116<br>
 */
	int s7_multiple_write_req(NativeLong cp_descr, short cref, short orderid, short number, S7_WRITE_PARA write_para_array, Pointer od_ptr);
        
/**
 * With the 's7_read_req()' call, a client application can read a variable on
 * the server. The variables can only be accessed using their symbolic
 * addresses. The data are transferred to the client in the confirmation
 * from the server and entered in the user buffer by the corresponding
 * processing function ('s7_get_read_cnf()').
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference to the S7 connection that will be established.
 * @param orderid Job identifier to identify the job to be sent and the 
 * corresponding confirmation.
 * @param read_para_ptr Pointer to a buffer provided by the user program for 
 * the following structure:<br><br>
 * struct S7_READ_PARA<br>
 * {<br>
 *     ord16 access;<br>
 *     char var_name[S7_MAX_NAMLEN+2];<br>
 *     ord16 index;<br>
 *     ord16 subindex;<br>
 *     ord16 address_len;<br>
 *     ord8 address[S7_MAX_ADDRESSLEN];<br>
 * }<br><br>
 * The 'access' parameter indicates the type of access. 
 * With 'S7_ACCESS_SYMB_ADDRESS', the symbolic address in the 'var_name' field
 * is expected.<br>
 * The 'var_name' parameter specifies the symbolic address of the variable to
 * be read and is evaluated if the variable is to be accessed by its symbolic
 * address ('access=S7_ACCESS_SYMB_ADDRESS').
 * (Please refer to the general information about variable addressing at the
 * start of this section.)<br>
 * The 'index' parameter is irrelevant and only implemented for reasons of 
 * compatibility with other SAPI interfaces.<br>
 * The 'subindex' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'address_len' parameter is irrelevant and only implemented for reasons
 * of compatibility with other SAPI interfaces.<br> 
 * The 'address' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * 
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error such
 * as assigning new parameters for the call.
 * <br><br>
 * <b>Amounts of Data</b> The maximum length of the result data depends on the
 * negotiated PDU size. For details of the PDU size, refer to Section 3.4.2,
 * 's7_get_initiate_cnf', page 64 (formulas for calculating intermediate
 * values in Section 7.3, page 207). The following table shows examples:<br>
 * <table border="1">
 * <tr>
 * <th>PDU Size (bytes)</th>
 * <th>Maximum Length of the Result Data(bytes)</th>
 * </tr>
 * <tr><td>240</td><td>222</td></tr>>
 * <tr><td>256</td><td>238</td></tr>
 * <tr><td>480</td><td>462</td></tr>
 * <tr><td>960</td><td>942</td></tr>
 * </table>
 */
	int s7_read_req(NativeLong cp_descr, short cref, short orderid, S7_READ_PARA read_para_ptr);
        
	/**
	 * Original signature : <code>int32 s7_read_long_req(ord32, ord16, ord16, S7_READ_PARA*)</code><br>
	 * <i>native declaration : line 696</i>
	 */
	int s7_read_long_req(NativeLong cp_descr, short cref, short orderid, S7_READ_PARA read_para_ptr);
        
/**
 * The receive function of the S7 library has the central task of analyzing
 * events received from the underlying communications system and to
 * report these directly to the application without any further processing.
 * The 's7_receive()' call is absolutely necessary when the client has sent
 * acknowledged calls and is waiting for the acknowledgment from the server,
 * wishes to receive unacknowledged messages from the network, 
 * ➢ has sent sequential jobs (for example establishing an S7 connection) to
 * ensure processing of the service sequence until it is completed.
 * The return value of the 's7_receive()' function provides a service
 * identifier when a message is received. This identifies the type of
 * service of the received response (for example 'S7_READ_CNF' when
 * a variable was read). After receiving a message with 's7_receive()', the
 * call for the corresponding processing function is mandatory (for example
 * 's7_get_read_cnf()'). Further receive calls are otherwise rejected with an
 * error message.
 * 
 * @param cp_descr Handle as return value of the 's7_init()' call. This 
 * identifies the communications processor and the VFD via which an event will
 * be fetched.
 * @param cref_ptr Address of a variable of the type 'ord16' provided by
 * the user program. The reference of the S7 connection on which an indication
 * or a confirmation was received is entered here. This corresponds to the S7
 * connection reference with which the job was sent.
 * @param orderid_ptr Address of a variable of the type 'ord16' provided
 * by the user program. The job identifier of the received acknowledgment is
 * entered here. This identifies the previously sent job for the user program.
 * The order ID is irrelevant for unacknowledged services or services to
 * establish an S7 connection and is assigned a default value.
 * @return This identifies the type of service of the received response
 * (for example 'S7_READ_CNF' when a variable was read).
 */
	@Deprecated 
	int s7_receive(NativeLong cp_descr, ShortByReference cref_ptr, ShortByReference orderid_ptr);        
        
	int s7_receive(NativeLong cp_descr, ShortBuffer cref_ptr, ShortBuffer orderid_ptr);
        
	/**
	 * Original signature : <code>int32 s7_set_window_handle_msg(ord32, ord32, ord32)</code><br>
	 * <i>native declaration : line 701</i>
	 */
	int s7_set_window_handle_msg(NativeLong cp_descr, NativeLong hWnd, NativeLong msgID);
        
/**
  * With the 's7_shut()' call, the application cancels the logon ('s7_init()')
  * at the communications processor identified by the CP descriptor. All the
  * resources of the communications system are returned and established 
  * connections are terminated. This call must therefore be made once for every
  * logon before the program is terminated.
  * 
  * @param cp_desc Handle as return value of the 's7_init()' call. This 
  * identifies the logon to be canceled.
  * @return <b>S7_OK</b> The function was processed without errors.
  * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
  * the requested service. This is a temporary problem such as a brief memory
  * shortage. The call can be repeated without modifying the transferred
  * parameters.
  * <b>S7_ERR</b> This value also indicates an error in the execution of the
  * requested service. In this case, however, the error does not allow the
  * service to be repeated. Here, steps must be taken to eliminate the error
  * such as assigning new parameters for the call.
 */  
	int s7_shut(NativeLong cp_descr);
        
/**
 * With this call, the user can make entries in the trace of the S7 library.
 * This makes it possible to save important data for analysis, to check the
 * program sequence or to synchronize with the trace entries.
 *
 * @param msg String with the user message to be entered in the trace. A trace
 * line can contain up to 78 characters of which, however, 14 characters are
 * reserved for the time since the trace was initialized and the line number.
 * This leaves a net data length of 64 characters per trace call. Longer
 * strings are truncated.
 * @return None
 *
 */
	@Deprecated 
	void s7_trace(Pointer msg);
	/**
	 * Original signature : <code>void s7_trace(char*)</code><br>
	 * <i>native declaration : line 711</i>
	 */
	void s7_trace(String msg);
        
/**
 * With the 's7_vfd_state_req()' call, a client application can read the logical
 * and physical status of another (remote) virtual field device (VFD).
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection on which the job will be sent.
 * @param orderid Job identifier to identify the job to be sent and the 
 * corresponding confirmation.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 *
 */
	int s7_vfd_state_req(NativeLong cp_descr, short cref, short orderid);
        
/**
 * With the 's7_write_req()' call, a client application can write to a variable
 * of a server. The variables can only be accessed using their symbolic
 * addresses. The data are transferred in the request from the client to
 * the server.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference to the S7 connection that will be established.
 * @param orderid Job identifier to identify the job to be sent and the 
 * corresponding confirmation.
 * @param write_para_ptr Pointer to a buffer provided by the user program for
 * the following structure:<br>
 * struct S7_WRITE_PARA
 * {    ord16 access;
 *      char var_name[S7_MAX_NAMLEN+2];
 *      ord16 index;
 *      ord16 subindex;
 *      ord16 address_len;
 *      ord8 address[S7_MAX_ADDRESSLEN];
 *      ord16 var_length;
 *      ord8 value[S7_MAX_BUFLEN];
 * }<br>
 * The 'access' parameter indicates the type of access.
 * With 'S7_ACCESS_SYMB_ADDRESS', the symbolic address in the 'var_name' field
 * is expected.<br>
 * The 'var_name' parameter specifies the symbolic address of the variable to be
 * written and is evaluated if the variable is to be accessed by its symbolic
 * address ('access=S7_ACCESS_SYMB_ADDRESS'). (Please refer to the general
 * information about variable addressing at the start of this section.)<br>
 * The 'index' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'subindex' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'address_len' parameter is irrelevant and only implemented for reasons
 * of compatibility with other SAPI interfaces.<br>
 * The 'address' parameter is irrelevant and only implemented for reasons of
 * compatibility with other SAPI interfaces.<br>
 * The 'var_length' parameter specifies the number of relevant and valid bytes
 * in the data buffer 'value'.<br>
 * The 'value' buffer contains the value of the variable to be written in the
 * network representation. When evaluating the content of the buffer, the data
 * type of the variable must be taken into account.<br>
 * <b>It is also important to take into account that the variable values are
 * saved byte aligned, in other words without padding bytes between two 
 * components.</b>
 * 
 * @param od_ptr The 'od_ptr' parameter is implemented to ensure compatibility
 * with other SAPI interfaces and must be assigned the NULL pointer, in other
 * words, the variable values are transferred on the SAPI-S7 programming
 * interface in the network representation.
 *
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 * <b>Amounts of Data:</b> The maximum length of the user data depends on the
 * negotiated PDU size. For details of the PDU size, refer to Section 3.4.2,
 * 's7_get_initiate_cnf', page 64 (formulas for calculating intermediate values
 * in Section 7.3, page 207). The following table shows examples:<br>
 * PDU Size (bytes) Maximum Length of the User Data
 * 240 212
 * 256 228
 * 480 256
 * 960 256 *)<br>
 *
  */
	int s7_write_req(NativeLong cp_descr, short cref, short orderid, S7_WRITE_PARA write_para_ptr, Pointer od_ptr);
	
        
	/**
	 * Original signature : <code>int32 s7_write_long_req(ord32, ord16, ord16, S7_WRITE_PARA_LONG*, void*)</code><br>
	 * <i>native declaration : line 723</i>
	 */
	int s7_write_long_req(NativeLong cp_descr, short cref, short orderid, S7_WRITE_PARA_LONG write_para_ptr, Pointer od_ptr);

/**
 * With high-performance applications, writing the trace to a file is 
 * inefficient. Nevertheless, entries should be available in the trace, for 
 * example if errors occur. For this reason, it is possible to configure the
 * trace using the mini-DB so that all the trace entries are made in an internal
 * ring buffer. The total information can then be written to a file with the
 * 's7_write_trace_buffer()' function and is therefore available for error
 * analysis and evaluation.
 * @param filename Name of the file to which the internal ring buffer will be
 * written.
 * @return none
 *
 */        
	@Deprecated 
	void s7_write_trace_buffer(Pointer filename);
	/**
	 * Original signature : <code>void s7_write_trace_buffer(char*)</code><br>
	 * <i>native declaration : line 729</i>
	 */
	void s7_write_trace_buffer(String filename);

/**
 * With the s7_bsend_req call, a client application can send up to 65534
bytes of data to a remote station.
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection on which the job
will be sent.
 * @param orderid Job identifier to identify the job to be sent and
the corresponding confirmation.
 * @param r_id Data are only sent to the partner on this
connection without problems when the address
parameter r_id is unique for the connection and
matches the remote R_ID of the BRCV .
Range of values (hexadecimal): 0 to FFFF FFFF
 * @param buffer_ptr Pointer to the address area to be sent.
 * @param buffer_len Explicitly specified length of the net data in
bytes; Range of values (hexadecimal): 1 to FFFE
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
    int s7_bsend_req(NativeLong cp_descr, short cref, short orderid, 
                     NativeLong r_id, Pointer buffer_ptr,
                     NativeLong buffer_len);
        
/**
 * The s7_get_bsend_cnf receives the result of the BSEND job.<br>
 * With the s7_receive call, the user program receives the S7_BSEND_CNF
 * confirmation when the send job has been executed.
 * Following this, the corresponding processing function 's7_get_bsend_cnf()'
 * must be called for internal processing in the library.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_bsend_cnf();
        
/**
 * With this call, the application logs on to receive BSEND jobs from the
 * connection partner. Each BSEND job with a specific R_ID of the connection
 * partner must correspond to exactly one s7_brcv_init with the same R_ID.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection on which the job will be sent.
 * @param r_id Data are only received from the partner on this connection, when
 * the address parameter r_id is unique for the connection and matches the
 * remote R_ID in BSEND.<br>
 * <b>The content of the r_id parameter of your application and the content
 * of the r_id parameter of the program of the connection partner must be the
 * same!</b><br>
 * <b>You can only receive BSEND data when the r_id parameters of both partners
 * are the same.</b><br>
 *
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing the
 * requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_brcv_init(NativeLong cp_descr, short cref, NativeLong r_id);
        
/**
 * With the s7_get_brcv_ind call, the net data sent by the partner are copied
 * to the specified memory area.
 *
 * @param buffer_ptr The pointer points to the destination address where the
 * received data will be entered.
 * @param buffer_len Maximum length of the receive buffer (buffer_ptr); when
 * the received data length is greater than the buffer length specified here,
 * S7_ERR is returned. In this case, the required buffer size is specified in
 * the rec_buffer_len parameter and the "detailed error" is set to 
 * S7_ERR_INVALID_DATARANGE_OR_TYPE.
 * @param *r_id_ptr *r_id_ptr points to a variable of the type ord32 that
 * contains the R_ID of the received BSEND job after the function is called.
 * @param rec_buffer_len_ptr The entire received data length when the return 
 * value is S7_OK or the required buffer size when the receive buffer is too
 * small and the return value is S7_ERR.
 *
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_brcv_ind(Pointer buffer_ptr, NativeLong buffer_len, NativeLongByReference r_id_ptr, NativeLongByReference rec_buffer_len_ptr);
        
/**
 * With this call, the application logs off at the connection partner.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection on which the job will be sent.
 * @param r_id The R_ID specified with the corresponding brcv_init.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the 
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_brcv_stop(NativeLong cp_descr, short cref, NativeLong r_id);
        
/**
 * With this call, a client application logs on at a SIMATIC S7 programmable
 * controller for one of the services SCAN or ALARM. The result of the initiate
 * request is received with the s7_get_msg_initiate_cnf function.
 *
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection on which the job will be sent.
 * @param orderid Job identifier to identify the job to be sent and the
 * corresponding confirmation.
 * @param fct_code Function code to log on for S7_SCAN_ALL_INITIATE or 
 * S7_ALARM_ALL_INITIATE; other codes are ignored.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_msg_initiate_req(NativeLong cp_descr, short cref, short orderid, short fct_code);
        
/**
 * With the 's7_receive' call, the user program receives the confirmation 
 * S7_MSG_INITIATE_CNF when the logon is completed. The function 
 * 's7_get_msg_initiate_cnf' described here must then be called to obtain 
 * the result of an ALARM or SCAN logon.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_msg_initiate_cnf();
        
/**
 * With this call, the application logs off for receiving message services.
 * 
 * @param cp_descr Handle as return value of the 's7_init()' call.
 * @param cref Reference of the S7 connection on which the job will be sent.
 * @param orderid Job identifier to identify the job to be sent and the
 * corresponding confirmation.
 * @param fct_code Function code to log on for S7_SCAN_ALL_INITIATE or 
 * S7_ALARM_ALL_INITIATE; other codes are ignored.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_msg_abort_req(NativeLong cp_descr, short cref, short orderid, short fct_code);
        
/**
 * With the 's7_receive' call, the user program receives the confirmation 
 * S7_MSG_ABORT_CNF when the logoff is completed. The function 
 * 's7_get_msg_abort_cnf' described here must then be called to obtain the
 * result of an ALARM or SCAN logoff.
 *
 * @param None
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR_RETRY</b> This value indicates that an error occurred executing
 * the requested service. This is a temporary problem such as a brief memory
 * shortage. The call can be repeated without modifying the transferred
 * parameters.<br>
 * <b>S7_ERR</b> This value also indicates an error in the execution of the
 * requested service. In this case, however, the error does not allow the
 * service to be repeated. Here, steps must be taken to eliminate the error
 * such as assigning new parameters for the call.<br>
 */
	int s7_get_msg_abort_cnf();
        
	/**
	 * Original signature : <code>int32 s7_get_scan_ind(void*, ord16*, S7_TIME_STAMP*, S7_SCAN_OBJECT*)</code><br>
	 * <i>native declaration : line 767</i><br>
	 * @deprecated use the safer methods {@link #s7_get_scan_ind(com.sun.jna.Pointer, java.nio.ShortBuffer, sapi.S7_TIME_STAMP, sapi.S7_SCAN_OBJECT)} and {@link #s7_get_scan_ind(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, sapi.S7_TIME_STAMP, sapi.S7_SCAN_OBJECT)} instead
	 */
	@Deprecated 
	int s7_get_scan_ind(Pointer od_ptr, ShortByReference no_scan_objects_ptr, S7_TIME_STAMP time_stamp_ptr, S7_SCAN_OBJECT scan_objects_array);
	/**
	 * Original signature : <code>int32 s7_get_scan_ind(void*, ord16*, S7_TIME_STAMP*, S7_SCAN_OBJECT*)</code><br>
	 * <i>native declaration : line 767</i>
	 */
	int s7_get_scan_ind(Pointer od_ptr, ShortBuffer no_scan_objects_ptr, S7_TIME_STAMP time_stamp_ptr, S7_SCAN_OBJECT scan_objects_array);
        
	/**
	 * Original signature : <code>int32 s7_get_alarm_ind(void*, ord16*, ord16*, ord16*, ord32*, S7_TIME_STAMP*, ord16*, S7_ADD_VALUE*)</code><br>
	 * <i>native declaration : line 772</i><br>
	 * @deprecated use the safer methods {@link #s7_get_alarm_ind(com.sun.jna.Pointer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.NativeLongByReference, sapi.S7_TIME_STAMP, java.nio.ShortBuffer, sapi.S7_ADD_VALUE)} and {@link #s7_get_alarm_ind(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.NativeLongByReference, sapi.S7_TIME_STAMP, com.sun.jna.ptr.ShortByReference, sapi.S7_ADD_VALUE)} instead
	 */
	@Deprecated 
	int s7_get_alarm_ind(Pointer od_ptr, ShortByReference state_ptr, ShortByReference ack_state_ptr, ShortByReference event_state_ptr, NativeLongByReference event_id_ptr, S7_TIME_STAMP time_stamp_ptr, ShortByReference no_add_value_ptr, S7_ADD_VALUE add_value_ptr);
	/**
	 * Original signature : <code>int32 s7_get_alarm_ind(void*, ord16*, ord16*, ord16*, ord32*, S7_TIME_STAMP*, ord16*, S7_ADD_VALUE*)</code><br>
	 * <i>native declaration : line 772</i>
	 */
	int s7_get_alarm_ind(Pointer od_ptr, ShortBuffer state_ptr, ShortBuffer ack_state_ptr, ShortBuffer event_state_ptr, NativeLongByReference event_id_ptr, S7_TIME_STAMP time_stamp_ptr, ShortBuffer no_add_value_ptr, S7_ADD_VALUE add_value_ptr);
	
/**
 * Logon for diagnostic messages. All connections with the same cp_descr are
 * monitored for changes. If the status of one or more of these connections
 * changes, a Windows message defined by s7_set_window_handle_msg is generated.
 * The application must then call s7_receive to determine which event has
 * occurred.
 * 
 * @param cp_descr The cp_descr returned at 's7_init()'. The diagnostic data
 * refer to all connections established with the cp_descr obtained through 
 * 's7_init()'.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR</b> Indicates an error requiring further steps before it can be
 * eliminated.<br>
*/
	int s7_diag_init(NativeLong cp_descr);
        
/**
 * Read the diagnostic information, when a message was received with s7_receive.
 * This function displays relevant diagnostic information only for the required
 * VFD (in STEP 7 known as the "application“) and transfers it to a data area
 * made available for this purpose.
 *
 * @param number Number of configured connections, as can be obtained, for
 * example, with 's7_get_conn()'.
 * @param *info_ptr pointer to an array of structures of the type CONN_INFO.
 * In the array, the user must provide the number of elements transferred in
 * the 'number' parameter.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR</b> Indicates an error requiring further steps before it can be
 * eliminated.<br>
 */
	int s7_get_diag_ind(short number, CONN_INFO info_ptr);
        
/**
 * Logoff for Diagnostic Messages.
 *
 * @param cp_descr The cp_descr returned at 's7_diag_init '.
 * @return <b>S7_OK</b> The function was processed without errors.<br>
 * <b>S7_ERR</b> Indicates an error requiring further steps before it can be
 * eliminated.<br>
 *
 */
	int s7_diag_stop(NativeLong cp_descr);
        
	/**
	 * Original signature : <code>int32 s7_block_read_req(ord32, ord16, ord16, ord32, ord16, ord16, char*)</code><br>
	 * <i>native declaration : line 788</i><br>
	 * @deprecated use the safer methods {@link #s7_block_read_req(com.sun.jna.NativeLong, short, short, com.sun.jna.NativeLong, short, short, java.lang.String)} and {@link #s7_block_read_req(com.sun.jna.NativeLong, short, short, com.sun.jna.NativeLong, short, short, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int s7_block_read_req(NativeLong cp_descr, short cref, short orderid, NativeLong block_flags, short block_type, short block_nr, Pointer block_file_name);
	/**
	 * Original signature : <code>int32 s7_block_read_req(ord32, ord16, ord16, ord32, ord16, ord16, char*)</code><br>
	 * <i>native declaration : line 788</i>
	 */
	int s7_block_read_req(NativeLong cp_descr, short cref, short orderid, NativeLong block_flags, short block_type, short block_nr, String block_file_name);
	/**
	 * Original signature : <code>int32 s7_block_write_req(ord32, ord16, ord16, ord32, char*)</code><br>
	 * <i>native declaration : line 796</i><br>
	 * @deprecated use the safer methods {@link #s7_block_write_req(com.sun.jna.NativeLong, short, short, com.sun.jna.NativeLong, java.lang.String)} and {@link #s7_block_write_req(com.sun.jna.NativeLong, short, short, com.sun.jna.NativeLong, com.sun.jna.Pointer)} instead
	 */
        
	@Deprecated 
	int s7_block_write_req(NativeLong cp_descr, short cref, short orderid, NativeLong block_flags, Pointer block_file_name);
	/**
	 * Original signature : <code>int32 s7_block_write_req(ord32, ord16, ord16, ord32, char*)</code><br>
	 * <i>native declaration : line 796</i>
	 */
	int s7_block_write_req(NativeLong cp_descr, short cref, short orderid, NativeLong block_flags, String block_file_name);
	/**
	 * Original signature : <code>int32 s7_block_delete_req(ord32, ord16, ord16, ord32, ord16, S7_BLOCK_LIST*)</code><br>
	 * <i>native declaration : line 802</i>
	 */
	int s7_block_delete_req(NativeLong cp_descr, short cref, short orderid, NativeLong block_flags, short block_num, S7_BLOCK_LIST block_list_ptr);
	/**
	 * Original signature : <code>int32 s7_block_link_in_req(ord32, ord16, ord16, ord16, S7_BLOCK_LIST*)</code><br>
	 * <i>native declaration : line 809</i>
	 */
	int s7_block_link_in_req(NativeLong cp_descr, short cref, short orderid, short block_num, S7_BLOCK_LIST block_list_ptr);
	/**
	 * Original signature : <code>int32 s7_block_compress_req(ord32, ord16, ord16)</code><br>
	 * <i>native declaration : line 815</i>
	 */
	int s7_block_compress_req(NativeLong cp_descr, short cref, short orderid);
	/**
	 * Original signature : <code>int32 s7_get_block_read_cnf(ord32*)</code><br>
	 * <i>native declaration : line 819</i>
	 */
	int s7_get_block_read_cnf(NativeLongByReference block_len_ptr);
	/**
	 * Original signature : <code>int32 s7_get_block_write_cnf()</code><br>
	 * <i>native declaration : line 821</i>
	 */
	int s7_get_block_write_cnf();
	/**
	 * Original signature : <code>int32 s7_get_block_delete_cnf()</code><br>
	 * <i>native declaration : line 823</i>
	 */
	int s7_get_block_delete_cnf();
	/**
	 * Original signature : <code>int32 s7_get_block_link_in_cnf()</code><br>
	 * <i>native declaration : line 825</i>
	 */
	int s7_get_block_link_in_cnf();
	/**
	 * Original signature : <code>int32 s7_get_block_compress_cnf()</code><br>
	 * <i>native declaration : line 827</i>
	 */
	int s7_get_block_compress_cnf();
	/**
	 * Original signature : <code>int32 s7_password_req(ord32, ord16, ord16, ord32, ord8*)</code><br>
	 * <i>native declaration : line 829</i><br>
	 * @deprecated use the safer methods {@link #s7_password_req(com.sun.jna.NativeLong, short, short, com.sun.jna.NativeLong, java.nio.ByteBuffer)} and {@link #s7_password_req(com.sun.jna.NativeLong, short, short, com.sun.jna.NativeLong, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int s7_password_req(NativeLong cp_descr, short cref, short orderid, NativeLong password_flags, Pointer password_ptr);
	/**
	 * Original signature : <code>int32 s7_password_req(ord32, ord16, ord16, ord32, ord8*)</code><br>
	 * <i>native declaration : line 829</i>
	 */
	int s7_password_req(NativeLong cp_descr, short cref, short orderid, NativeLong password_flags, ByteBuffer password_ptr);
	/**
	 * Original signature : <code>int32 s7_get_password_cnf()</code><br>
	 * <i>native declaration : line 835</i>
	 */
	int s7_get_password_cnf();
}
